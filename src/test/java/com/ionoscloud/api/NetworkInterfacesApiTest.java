/*
 * CLOUD API
 * An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * The version of the OpenAPI document: 6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.api;

import com.ionoscloud.ApiException;
import com.ionoscloud.model.Error;
import com.ionoscloud.model.Nic;
import com.ionoscloud.model.NicProperties;
import com.ionoscloud.model.NicPut;
import com.ionoscloud.model.Nics;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NetworkInterfacesApi
 */
@Ignore
public class NetworkInterfacesApiTest {

    private final NetworkInterfacesApi api = new NetworkInterfacesApi();

    
    /**
     * Delete a Network Interface
     *
     * Deletes the specified network interface.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersNicsDeleteTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        String nicId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.datacentersServersNicsDelete(datacenterId, serverId, nicId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Network Interface
     *
     * Retrieves the attributes of a given network interface.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersNicsFindByIdTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        String nicId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Nic response = api.datacentersServersNicsFindById(datacenterId, serverId, nicId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * List Network Interfaces
     *
     * Retrieves a list of network interfaces.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersNicsGetTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Integer offset = null;
        Integer limit = null;
        Nics response = api.datacentersServersNicsGet(datacenterId, serverId, pretty, depth, xContractNumber, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Partially Modify a Network Interface
     *
     * You can use update attributes of a network interface.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersNicsPatchTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        String nicId = null;
        NicProperties nic = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Nic response = api.datacentersServersNicsPatch(datacenterId, serverId, nicId, nic, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Create a Network Interface
     *
     * Adds a network interface to the target server. Combined count of network interfaces and volumes attached to the server should not exceed size 24.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersNicsPostTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        Nic nic = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Nic response = api.datacentersServersNicsPost(datacenterId, serverId, nic, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Modify a Network Interface
     *
     * You can use update attributes of a network interface.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersNicsPutTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        String nicId = null;
        NicPut nic = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Nic response = api.datacentersServersNicsPut(datacenterId, serverId, nicId, nic, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
}
