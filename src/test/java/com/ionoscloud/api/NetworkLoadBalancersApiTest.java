/*
 * CLOUD API
 * An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * The version of the OpenAPI document: 6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.api;

import com.ionoscloud.ApiException;
import com.ionoscloud.model.Error;
import com.ionoscloud.model.FlowLog;
import com.ionoscloud.model.FlowLogProperties;
import com.ionoscloud.model.FlowLogPut;
import com.ionoscloud.model.FlowLogs;
import com.ionoscloud.model.NetworkLoadBalancer;
import com.ionoscloud.model.NetworkLoadBalancerForwardingRule;
import com.ionoscloud.model.NetworkLoadBalancerForwardingRuleProperties;
import com.ionoscloud.model.NetworkLoadBalancerForwardingRulePut;
import com.ionoscloud.model.NetworkLoadBalancerForwardingRules;
import com.ionoscloud.model.NetworkLoadBalancerProperties;
import com.ionoscloud.model.NetworkLoadBalancerPut;
import com.ionoscloud.model.NetworkLoadBalancers;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NetworkLoadBalancersApi
 */
@Ignore
public class NetworkLoadBalancersApiTest {

    private final NetworkLoadBalancersApi api = new NetworkLoadBalancersApi();

    
    /**
     * Remove an Network Load Balancer
     *
     * Removes the specified Network Load Balancer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNetworkloadbalancersDeleteTest() throws ApiException {
        String datacenterId = null;
        String networkLoadBalancerId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.datacentersNetworkloadbalancersDelete(datacenterId, networkLoadBalancerId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve an Network Load Balancer
     *
     * Retrieves the attributes of a given Network Load Balancer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNetworkloadbalancersFindByNetworkLoadBalancerIdTest() throws ApiException {
        String datacenterId = null;
        String networkLoadBalancerId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        NetworkLoadBalancer response = api.datacentersNetworkloadbalancersFindByNetworkLoadBalancerId(datacenterId, networkLoadBalancerId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Remove Flow Log from Network Load Balancer
     *
     * This will remove a flow log from the network load balancer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNetworkloadbalancersFlowlogsDeleteTest() throws ApiException {
        String datacenterId = null;
        String networkLoadBalancerId = null;
        String flowLogId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.datacentersNetworkloadbalancersFlowlogsDelete(datacenterId, networkLoadBalancerId, flowLogId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Flow Log of the Network Load Balancer
     *
     * This will return a Flow Log of the Network Load Balancer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNetworkloadbalancersFlowlogsFindByFlowLogIdTest() throws ApiException {
        String datacenterId = null;
        String networkLoadBalancerId = null;
        String flowLogId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        FlowLog response = api.datacentersNetworkloadbalancersFlowlogsFindByFlowLogId(datacenterId, networkLoadBalancerId, flowLogId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * List Network Load Balancer Flow Logs
     *
     * You can retrieve a list of Flow Logs of the Network Load Balancer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNetworkloadbalancersFlowlogsGetTest() throws ApiException {
        String datacenterId = null;
        String networkLoadBalancerId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        FlowLogs response = api.datacentersNetworkloadbalancersFlowlogsGet(datacenterId, networkLoadBalancerId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Partially modify a Flow Log of the Network Load Balancer
     *
     * You can use to partially update a Flow Log of a Network Load Balancer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNetworkloadbalancersFlowlogsPatchTest() throws ApiException {
        String datacenterId = null;
        String networkLoadBalancerId = null;
        String flowLogId = null;
        FlowLogProperties networkLoadBalancerFlowLogProperties = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        FlowLog response = api.datacentersNetworkloadbalancersFlowlogsPatch(datacenterId, networkLoadBalancerId, flowLogId, networkLoadBalancerFlowLogProperties, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Add a Network Load Balancer Flow Log
     *
     * This will add a new Flow Log to the Network Load Balancer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNetworkloadbalancersFlowlogsPostTest() throws ApiException {
        String datacenterId = null;
        String networkLoadBalancerId = null;
        FlowLog networkLoadBalancerFlowLog = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        FlowLog response = api.datacentersNetworkloadbalancersFlowlogsPost(datacenterId, networkLoadBalancerId, networkLoadBalancerFlowLog, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Modify a Flow Log of the Network Load Balancer
     *
     * You can use to update a Flow Log of the Network Load Balancer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNetworkloadbalancersFlowlogsPutTest() throws ApiException {
        String datacenterId = null;
        String networkLoadBalancerId = null;
        String flowLogId = null;
        FlowLogPut networkLoadBalancerFlowLog = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        FlowLog response = api.datacentersNetworkloadbalancersFlowlogsPut(datacenterId, networkLoadBalancerId, flowLogId, networkLoadBalancerFlowLog, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Remove Forwarding Rule from Network Load Balancer
     *
     * This will remove a forwarding rule from the Network Load Balancer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNetworkloadbalancersForwardingrulesDeleteTest() throws ApiException {
        String datacenterId = null;
        String networkLoadBalancerId = null;
        String forwardingRuleId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.datacentersNetworkloadbalancersForwardingrulesDelete(datacenterId, networkLoadBalancerId, forwardingRuleId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Forwarding Rule of the Network Load Balancer
     *
     * This will a forwarding rule of the Network Load Balancer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleIdTest() throws ApiException {
        String datacenterId = null;
        String networkLoadBalancerId = null;
        String forwardingRuleId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        NetworkLoadBalancerForwardingRule response = api.datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId(datacenterId, networkLoadBalancerId, forwardingRuleId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * List Network Load Balancer Forwarding Rules
     *
     * You can retrieve a list of forwarding rules of the Network Load Balancer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNetworkloadbalancersForwardingrulesGetTest() throws ApiException {
        String datacenterId = null;
        String networkLoadBalancerId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        NetworkLoadBalancerForwardingRules response = api.datacentersNetworkloadbalancersForwardingrulesGet(datacenterId, networkLoadBalancerId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Partially modify a forwarding rule of the Network Load Balancer
     *
     * You can use to partially update a forwarding rule of a Network Load Balancer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNetworkloadbalancersForwardingrulesPatchTest() throws ApiException {
        String datacenterId = null;
        String networkLoadBalancerId = null;
        String forwardingRuleId = null;
        NetworkLoadBalancerForwardingRuleProperties networkLoadBalancerForwardingRuleProperties = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        NetworkLoadBalancerForwardingRule response = api.datacentersNetworkloadbalancersForwardingrulesPatch(datacenterId, networkLoadBalancerId, forwardingRuleId, networkLoadBalancerForwardingRuleProperties, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Add a Network Load Balancer Forwarding Rule
     *
     * This will add a new forwarding rule to the Network Load Balancer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNetworkloadbalancersForwardingrulesPostTest() throws ApiException {
        String datacenterId = null;
        String networkLoadBalancerId = null;
        NetworkLoadBalancerForwardingRule networkLoadBalancerForwardingRule = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        NetworkLoadBalancerForwardingRule response = api.datacentersNetworkloadbalancersForwardingrulesPost(datacenterId, networkLoadBalancerId, networkLoadBalancerForwardingRule, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Modify a forwarding rule of the Network Load Balancer
     *
     * You can use to update a forwarding rule of the Network Load Balancer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNetworkloadbalancersForwardingrulesPutTest() throws ApiException {
        String datacenterId = null;
        String networkLoadBalancerId = null;
        String forwardingRuleId = null;
        NetworkLoadBalancerForwardingRulePut networkLoadBalancerForwardingRule = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        NetworkLoadBalancerForwardingRule response = api.datacentersNetworkloadbalancersForwardingrulesPut(datacenterId, networkLoadBalancerId, forwardingRuleId, networkLoadBalancerForwardingRule, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * List Network Load Balancers
     *
     * Retrieve a list of Network Load Balancers within the datacenter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNetworkloadbalancersGetTest() throws ApiException {
        String datacenterId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Integer offset = null;
        Integer limit = null;
        NetworkLoadBalancers response = api.datacentersNetworkloadbalancersGet(datacenterId, pretty, depth, xContractNumber, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Partially update an Network Load Balancer
     *
     * Partially update the attributes of a given Network Load Balancer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNetworkloadbalancersPatchTest() throws ApiException {
        String datacenterId = null;
        String networkLoadBalancerId = null;
        NetworkLoadBalancerProperties networkLoadBalancerProperties = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        NetworkLoadBalancer response = api.datacentersNetworkloadbalancersPatch(datacenterId, networkLoadBalancerId, networkLoadBalancerProperties, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Create an Network Load Balancer
     *
     * Creates an Network Load Balancer within the datacenter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNetworkloadbalancersPostTest() throws ApiException {
        String datacenterId = null;
        NetworkLoadBalancer networkLoadBalancer = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        NetworkLoadBalancer response = api.datacentersNetworkloadbalancersPost(datacenterId, networkLoadBalancer, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Update an Network Load Balancer
     *
     * Update the attributes of a given Network Load Balancer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNetworkloadbalancersPutTest() throws ApiException {
        String datacenterId = null;
        String networkLoadBalancerId = null;
        NetworkLoadBalancerPut networkLoadBalancer = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Integer offset = null;
        Integer limit = null;
        NetworkLoadBalancer response = api.datacentersNetworkloadbalancersPut(datacenterId, networkLoadBalancerId, networkLoadBalancer, pretty, depth, xContractNumber, offset, limit);

        // TODO: test validations
    }
    
}
