/*
 * CLOUD API
 * An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * The version of the OpenAPI document: 6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.api;

import com.ionoscloud.ApiException;
import com.ionoscloud.model.Error;
import com.ionoscloud.model.FlowLog;
import com.ionoscloud.model.FlowLogProperties;
import com.ionoscloud.model.FlowLogPut;
import com.ionoscloud.model.FlowLogs;
import com.ionoscloud.model.NatGateway;
import com.ionoscloud.model.NatGatewayProperties;
import com.ionoscloud.model.NatGatewayPut;
import com.ionoscloud.model.NatGatewayRule;
import com.ionoscloud.model.NatGatewayRuleProperties;
import com.ionoscloud.model.NatGatewayRulePut;
import com.ionoscloud.model.NatGatewayRules;
import com.ionoscloud.model.NatGateways;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NatGatewaysApi
 */
@Ignore
public class NatGatewaysApiTest {

    private final NatGatewaysApi api = new NatGatewaysApi();

    
    /**
     * Remove a NAT gateway
     *
     * Removes the specified NAT gateway.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNatgatewaysDeleteTest() throws ApiException {
        String datacenterId = null;
        String natGatewayId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.datacentersNatgatewaysDelete(datacenterId, natGatewayId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve a NAT gateway
     *
     * Retrieves the attributes of a given NAT gateway.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNatgatewaysFindByNatGatewayIdTest() throws ApiException {
        String datacenterId = null;
        String natGatewayId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        NatGateway response = api.datacentersNatgatewaysFindByNatGatewayId(datacenterId, natGatewayId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Remove Flow Log from NAT Gateway
     *
     * This will remove a flow log from the NAT gateway.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNatgatewaysFlowlogsDeleteTest() throws ApiException {
        String datacenterId = null;
        String natGatewayId = null;
        String flowLogId = null;
        Boolean pretty = null;
        Integer depth = null;
        Object response = api.datacentersNatgatewaysFlowlogsDelete(datacenterId, natGatewayId, flowLogId, pretty, depth);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Flow Log of the NAT Gateway
     *
     * This will return a Flow Log of the NAT Gateway.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNatgatewaysFlowlogsFindByFlowLogIdTest() throws ApiException {
        String datacenterId = null;
        String natGatewayId = null;
        String flowLogId = null;
        Boolean pretty = null;
        Integer depth = null;
        FlowLog response = api.datacentersNatgatewaysFlowlogsFindByFlowLogId(datacenterId, natGatewayId, flowLogId, pretty, depth);

        // TODO: test validations
    }
    
    /**
     * List NAT Gateway Flow Logs
     *
     * You can retrieve a list of Flow Logs of the NAT Gateway.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNatgatewaysFlowlogsGetTest() throws ApiException {
        String datacenterId = null;
        String natGatewayId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer offset = null;
        Integer limit = null;
        FlowLogs response = api.datacentersNatgatewaysFlowlogsGet(datacenterId, natGatewayId, pretty, depth, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Partially modify a Flow Log of the NAT Gateway
     *
     * You can use to partially update a Flow Log of a NAT Gateway.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNatgatewaysFlowlogsPatchTest() throws ApiException {
        String datacenterId = null;
        String natGatewayId = null;
        String flowLogId = null;
        FlowLogProperties natGatewayFlowLogProperties = null;
        Boolean pretty = null;
        Integer depth = null;
        FlowLog response = api.datacentersNatgatewaysFlowlogsPatch(datacenterId, natGatewayId, flowLogId, natGatewayFlowLogProperties, pretty, depth);

        // TODO: test validations
    }
    
    /**
     * Add a NAT Gateways Flow Log
     *
     * This will add a new Flow Log to the NAT Gateway.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNatgatewaysFlowlogsPostTest() throws ApiException {
        String datacenterId = null;
        String natGatewayId = null;
        FlowLog natGatewayFlowLog = null;
        Boolean pretty = null;
        Integer depth = null;
        FlowLog response = api.datacentersNatgatewaysFlowlogsPost(datacenterId, natGatewayId, natGatewayFlowLog, pretty, depth);

        // TODO: test validations
    }
    
    /**
     * Modify a Flow Log of the NAT Gateway
     *
     * You can use to update a Flow Log of the NAT Gateway.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNatgatewaysFlowlogsPutTest() throws ApiException {
        String datacenterId = null;
        String natGatewayId = null;
        String flowLogId = null;
        FlowLogPut natGatewayFlowLog = null;
        Boolean pretty = null;
        Integer depth = null;
        FlowLog response = api.datacentersNatgatewaysFlowlogsPut(datacenterId, natGatewayId, flowLogId, natGatewayFlowLog, pretty, depth);

        // TODO: test validations
    }
    
    /**
     * List NAT Gateways
     *
     * Retrieve a list of NAT Gateways within the datacenter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNatgatewaysGetTest() throws ApiException {
        String datacenterId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        NatGateways response = api.datacentersNatgatewaysGet(datacenterId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Partially update a NAT gateway
     *
     * Partially update the attributes of a given NAT gateway
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNatgatewaysPatchTest() throws ApiException {
        String datacenterId = null;
        String natGatewayId = null;
        NatGatewayProperties natGatewayProperties = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        NatGateway response = api.datacentersNatgatewaysPatch(datacenterId, natGatewayId, natGatewayProperties, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Create a NAT Gateway
     *
     * Creates a NAT Gateway within the datacenter. User should be the contract owner or a admin or a user with createInternetAccess privilege
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNatgatewaysPostTest() throws ApiException {
        String datacenterId = null;
        NatGateway natGateway = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        NatGateway response = api.datacentersNatgatewaysPost(datacenterId, natGateway, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Update a NAT gateway
     *
     * Update the attributes of a given NAT gateway
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNatgatewaysPutTest() throws ApiException {
        String datacenterId = null;
        String natGatewayId = null;
        NatGatewayPut natGateway = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Integer offset = null;
        Integer limit = null;
        NatGateway response = api.datacentersNatgatewaysPut(datacenterId, natGatewayId, natGateway, pretty, depth, xContractNumber, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Remove rule from NAT Gateway
     *
     * This will remove a rule from the NAT gateway.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNatgatewaysRulesDeleteTest() throws ApiException {
        String datacenterId = null;
        String natGatewayId = null;
        String natGatewayRuleId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        Object response = api.datacentersNatgatewaysRulesDelete(datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Retrieve a NAT Gateway Rule
     *
     * Retrieves the attributes of a given NAT gateway rule.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNatgatewaysRulesFindByNatGatewayRuleIdTest() throws ApiException {
        String datacenterId = null;
        String natGatewayId = null;
        String natGatewayRuleId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        NatGatewayRule response = api.datacentersNatgatewaysRulesFindByNatGatewayRuleId(datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * List NAT Gateways Rules
     *
     * Retrieve a list of rules of a NAT Gateway within the datacenter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNatgatewaysRulesGetTest() throws ApiException {
        String datacenterId = null;
        String natGatewayId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        NatGatewayRules response = api.datacentersNatgatewaysRulesGet(datacenterId, natGatewayId, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Partially modify a rule of the NAT gateway
     *
     * You can use to partially update a rule of a NAT gateway.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNatgatewaysRulesPatchTest() throws ApiException {
        String datacenterId = null;
        String natGatewayId = null;
        String natGatewayRuleId = null;
        NatGatewayRuleProperties natGatewayRuleProperties = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        NatGatewayRule response = api.datacentersNatgatewaysRulesPatch(datacenterId, natGatewayId, natGatewayRuleId, natGatewayRuleProperties, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Create a NAT Gateway Rule
     *
     * Creates a rule within the NAT Gateway of a datacenter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNatgatewaysRulesPostTest() throws ApiException {
        String datacenterId = null;
        String natGatewayId = null;
        NatGatewayRule natGatewayRule = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        NatGatewayRule response = api.datacentersNatgatewaysRulesPost(datacenterId, natGatewayId, natGatewayRule, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
    /**
     * Modify a rule of the NAT gateway
     *
     * You can use to update a rule of the NAT gateway.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersNatgatewaysRulesPutTest() throws ApiException {
        String datacenterId = null;
        String natGatewayId = null;
        String natGatewayRuleId = null;
        NatGatewayRulePut natGatewayRule = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer xContractNumber = null;
        NatGatewayRule response = api.datacentersNatgatewaysRulesPut(datacenterId, natGatewayId, natGatewayRuleId, natGatewayRule, pretty, depth, xContractNumber);

        // TODO: test validations
    }
    
}
