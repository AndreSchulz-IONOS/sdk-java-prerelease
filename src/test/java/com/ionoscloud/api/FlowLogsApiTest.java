/*
 * CLOUD API
 * An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * The version of the OpenAPI document: 6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.api;

import com.ionoscloud.ApiException;
import com.ionoscloud.model.Error;
import com.ionoscloud.model.FlowLog;
import com.ionoscloud.model.FlowLogProperties;
import com.ionoscloud.model.FlowLogPut;
import com.ionoscloud.model.FlowLogs;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FlowLogsApi
 */
@Ignore
public class FlowLogsApiTest {

    private final FlowLogsApi api = new FlowLogsApi();

    
    /**
     * Delete a Flow Log
     *
     * Removes the specified Flow Log.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersNicsFlowlogsDeleteTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        String nicId = null;
        String flowlogId = null;
        Boolean pretty = null;
        Integer depth = null;
        Object response = api.datacentersServersNicsFlowlogsDelete(datacenterId, serverId, nicId, flowlogId, pretty, depth);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Flow Log
     *
     * Retrieves the attributes of a given Flow Log.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersNicsFlowlogsFindByIdTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        String nicId = null;
        String flowlogId = null;
        Boolean pretty = null;
        Integer depth = null;
        FlowLog response = api.datacentersServersNicsFlowlogsFindById(datacenterId, serverId, nicId, flowlogId, pretty, depth);

        // TODO: test validations
    }
    
    /**
     * List Flow Logs
     *
     * Retrieves a list of Flow Logs associated with a particular network interface.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersNicsFlowlogsGetTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        String nicId = null;
        Boolean pretty = null;
        Integer depth = null;
        Integer offset = null;
        Integer limit = null;
        FlowLogs response = api.datacentersServersNicsFlowlogsGet(datacenterId, serverId, nicId, pretty, depth, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Partially update a Flow Log
     *
     * This will partially update a Flow Log record.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersNicsFlowlogsPatchTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        String nicId = null;
        String flowlogId = null;
        FlowLogProperties flowlog = null;
        Boolean pretty = null;
        Integer depth = null;
        FlowLog response = api.datacentersServersNicsFlowlogsPatch(datacenterId, serverId, nicId, flowlogId, flowlog, pretty, depth);

        // TODO: test validations
    }
    
    /**
     * Create a Flow Log
     *
     * This will add a Flow Log to the network interface.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersNicsFlowlogsPostTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        String nicId = null;
        FlowLog flowlog = null;
        Boolean pretty = null;
        Integer depth = null;
        FlowLog response = api.datacentersServersNicsFlowlogsPost(datacenterId, serverId, nicId, flowlog, pretty, depth);

        // TODO: test validations
    }
    
    /**
     * Modify a Flow Log
     *
     * This will update a Flow Log record.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void datacentersServersNicsFlowlogsPutTest() throws ApiException {
        String datacenterId = null;
        String serverId = null;
        String nicId = null;
        String flowlogId = null;
        FlowLogPut flowlog = null;
        Boolean pretty = null;
        Integer depth = null;
        FlowLog response = api.datacentersServersNicsFlowlogsPut(datacenterId, serverId, nicId, flowlogId, flowlog, pretty, depth);

        // TODO: test validations
    }
    
}
