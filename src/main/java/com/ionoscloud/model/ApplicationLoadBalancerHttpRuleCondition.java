/*
 * CLOUD API
 * IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * The version of the OpenAPI document: 6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ApplicationLoadBalancerHttpRuleCondition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-29T14:47:41.954Z[Etc/UTC]")

public class ApplicationLoadBalancerHttpRuleCondition {
  
  /**
   * Type of the HTTP rule condition.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    HEADER("HEADER"),
    
    PATH("PATH"),
    
    QUERY("QUERY"),
    
    METHOD("METHOD"),
    
    HOST("HOST"),
    
    COOKIE("COOKIE"),
    
    SOURCE_IP("SOURCE_IP");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {

      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;


  /**
   * Matching rule for the HTTP rule condition attribute; mandatory for HEADER, PATH, QUERY, METHOD, HOST, and COOKIE types; must be null when type is SOURCE_IP.
   */
  @JsonAdapter(ConditionEnum.Adapter.class)
  public enum ConditionEnum {
    EXISTS("EXISTS"),
    
    CONTAINS("CONTAINS"),
    
    EQUALS("EQUALS"),
    
    MATCHES("MATCHES"),
    
    STARTS_WITH("STARTS_WITH"),
    
    ENDS_WITH("ENDS_WITH");

    private String value;

    ConditionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConditionEnum fromValue(String value) {

      for (ConditionEnum b : ConditionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ConditionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConditionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConditionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConditionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private ConditionEnum condition;


  public static final String SERIALIZED_NAME_NEGATE = "negate";
  @SerializedName(SERIALIZED_NAME_NEGATE)
  private Boolean negate;


  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;


  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  

  public ApplicationLoadBalancerHttpRuleCondition type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of the HTTP rule condition.
   * @return type
  **/
  @ApiModelProperty(example = "HEADER", required = true, value = "Type of the HTTP rule condition.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }



  public ApplicationLoadBalancerHttpRuleCondition condition(ConditionEnum condition) {
    
    this.condition = condition;
    return this;
  }

   /**
   * Matching rule for the HTTP rule condition attribute; mandatory for HEADER, PATH, QUERY, METHOD, HOST, and COOKIE types; must be null when type is SOURCE_IP.
   * @return condition
  **/
  @ApiModelProperty(example = "STARTS_WITH", required = true, value = "Matching rule for the HTTP rule condition attribute; mandatory for HEADER, PATH, QUERY, METHOD, HOST, and COOKIE types; must be null when type is SOURCE_IP.")

  public ConditionEnum getCondition() {
    return condition;
  }


  public void setCondition(ConditionEnum condition) {
    this.condition = condition;
  }



  public ApplicationLoadBalancerHttpRuleCondition negate(Boolean negate) {
    
    this.negate = negate;
    return this;
  }

   /**
   * Specifies whether the condition is negated or not; the default is False.
   * @return negate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Specifies whether the condition is negated or not; the default is False.")

  public Boolean getNegate() {
    return negate;
  }


  public void setNegate(Boolean negate) {
    this.negate = negate;
  }



  public ApplicationLoadBalancerHttpRuleCondition key(String key) {
    
    this.key = key;
    return this;
  }

   /**
   * Must be null when type is PATH, METHOD, HOST, or SOURCE_IP. Key can only be set when type is COOKIES, HEADER, or QUERY.
   * @return key
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "forward-at", value = "Must be null when type is PATH, METHOD, HOST, or SOURCE_IP. Key can only be set when type is COOKIES, HEADER, or QUERY.")

  public String getKey() {
    return key;
  }


  public void setKey(String key) {
    this.key = key;
  }



  public ApplicationLoadBalancerHttpRuleCondition value(String value) {
    
    this.value = value;
    return this;
  }

   /**
   * Mandatory for conditions CONTAINS, EQUALS, MATCHES, STARTS_WITH, ENDS_WITH; must be null when condition is EXISTS; should be a valid CIDR if provided and if type is SOURCE_IP.
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Friday", value = "Mandatory for conditions CONTAINS, EQUALS, MATCHES, STARTS_WITH, ENDS_WITH; must be null when condition is EXISTS; should be a valid CIDR if provided and if type is SOURCE_IP.")

  public String getValue() {
    return value;
  }


  public void setValue(String value) {
    this.value = value;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationLoadBalancerHttpRuleCondition applicationLoadBalancerHttpRuleCondition = (ApplicationLoadBalancerHttpRuleCondition) o;
    return Objects.equals(this.type, applicationLoadBalancerHttpRuleCondition.type) && Objects.equals(this.condition, applicationLoadBalancerHttpRuleCondition.condition) && Objects.equals(this.negate, applicationLoadBalancerHttpRuleCondition.negate) && Objects.equals(this.key, applicationLoadBalancerHttpRuleCondition.key) && Objects.equals(this.value, applicationLoadBalancerHttpRuleCondition.value);
  }




  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationLoadBalancerHttpRuleCondition {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");

    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");

    sb.append("    negate: ").append(toIndentedString(negate)).append("\n");

    sb.append("    key: ").append(toIndentedString(key)).append("\n");

    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

