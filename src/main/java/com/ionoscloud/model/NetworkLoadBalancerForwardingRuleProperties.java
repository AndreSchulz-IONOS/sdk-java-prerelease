/*
 * CLOUD API
 * An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * The version of the OpenAPI document: 6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ionoscloud.model.NetworkLoadBalancerForwardingRuleHealthCheck;
import com.ionoscloud.model.NetworkLoadBalancerForwardingRuleTarget;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * NetworkLoadBalancerForwardingRuleProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-03-15T10:46:23.668Z[Etc/UTC]")

public class NetworkLoadBalancerForwardingRuleProperties {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Algorithm for the balancing.
   */
  @JsonAdapter(AlgorithmEnum.Adapter.class)
  public enum AlgorithmEnum {
    ROUND_ROBIN("ROUND_ROBIN"),
    
    LEAST_CONNECTION("LEAST_CONNECTION"),
    
    RANDOM("RANDOM"),
    
    SOURCE_IP("SOURCE_IP");

    private String value;

    AlgorithmEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AlgorithmEnum fromValue(String value) {
      for (AlgorithmEnum b : AlgorithmEnum.values()) {
        if (b.value.equals(value) || value.equals("collection")) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AlgorithmEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlgorithmEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlgorithmEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AlgorithmEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ALGORITHM = "algorithm";
  @SerializedName(SERIALIZED_NAME_ALGORITHM)
  private AlgorithmEnum algorithm;

  /**
   * Protocol of the balancing.
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    TCP("TCP");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolEnum fromValue(String value) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(value) || value.equals("collection")) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ProtocolEnum protocol;

  public static final String SERIALIZED_NAME_LISTENER_IP = "listenerIp";
  @SerializedName(SERIALIZED_NAME_LISTENER_IP)
  private String listenerIp;

  public static final String SERIALIZED_NAME_LISTENER_PORT = "listenerPort";
  @SerializedName(SERIALIZED_NAME_LISTENER_PORT)
  private Integer listenerPort;

  public static final String SERIALIZED_NAME_HEALTH_CHECK = "healthCheck";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK)
  private NetworkLoadBalancerForwardingRuleHealthCheck healthCheck;

  public static final String SERIALIZED_NAME_TARGETS = "targets";
  @SerializedName(SERIALIZED_NAME_TARGETS)
  private List<NetworkLoadBalancerForwardingRuleTarget> targets = new ArrayList<NetworkLoadBalancerForwardingRuleTarget>();


  public NetworkLoadBalancerForwardingRuleProperties name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * A name of that Network Load Balancer forwarding rule
   * @return name
  **/
  @ApiModelProperty(example = "My Network Load Balancer forwarding rule", required = true, value = "A name of that Network Load Balancer forwarding rule")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public NetworkLoadBalancerForwardingRuleProperties algorithm(AlgorithmEnum algorithm) {
    
    this.algorithm = algorithm;
    return this;
  }

   /**
   * Algorithm for the balancing.
   * @return algorithm
  **/
  @ApiModelProperty(example = "ROUND_ROBIN", required = true, value = "Algorithm for the balancing.")

  public AlgorithmEnum getAlgorithm() {
    return algorithm;
  }


  public void setAlgorithm(AlgorithmEnum algorithm) {
    this.algorithm = algorithm;
  }


  public NetworkLoadBalancerForwardingRuleProperties protocol(ProtocolEnum protocol) {
    
    this.protocol = protocol;
    return this;
  }

   /**
   * Protocol of the balancing.
   * @return protocol
  **/
  @ApiModelProperty(example = "TCP", required = true, value = "Protocol of the balancing.")

  public ProtocolEnum getProtocol() {
    return protocol;
  }


  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }


  public NetworkLoadBalancerForwardingRuleProperties listenerIp(String listenerIp) {
    
    this.listenerIp = listenerIp;
    return this;
  }

   /**
   * Listening IP. (inbound)
   * @return listenerIp
  **/
  @ApiModelProperty(example = "81.173.1.2", required = true, value = "Listening IP. (inbound)")

  public String getListenerIp() {
    return listenerIp;
  }


  public void setListenerIp(String listenerIp) {
    this.listenerIp = listenerIp;
  }


  public NetworkLoadBalancerForwardingRuleProperties listenerPort(Integer listenerPort) {
    
    this.listenerPort = listenerPort;
    return this;
  }

   /**
   * Listening port number. (inbound) (range: 1 to 65535)
   * @return listenerPort
  **/
  @ApiModelProperty(example = "8080", required = true, value = "Listening port number. (inbound) (range: 1 to 65535)")

  public Integer getListenerPort() {
    return listenerPort;
  }


  public void setListenerPort(Integer listenerPort) {
    this.listenerPort = listenerPort;
  }


  public NetworkLoadBalancerForwardingRuleProperties healthCheck(NetworkLoadBalancerForwardingRuleHealthCheck healthCheck) {
    
    this.healthCheck = healthCheck;
    return this;
  }

   /**
   * Get healthCheck
   * @return healthCheck
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NetworkLoadBalancerForwardingRuleHealthCheck getHealthCheck() {
    return healthCheck;
  }


  public void setHealthCheck(NetworkLoadBalancerForwardingRuleHealthCheck healthCheck) {
    this.healthCheck = healthCheck;
  }


  public NetworkLoadBalancerForwardingRuleProperties targets(List<NetworkLoadBalancerForwardingRuleTarget> targets) {
    
    this.targets = targets;
    return this;
  }

  public NetworkLoadBalancerForwardingRuleProperties addTargetsItem(NetworkLoadBalancerForwardingRuleTarget targetsItem) {
    this.targets.add(targetsItem);
    return this;
  }

   /**
   * Array of items in that collection
   * @return targets
  **/
  @ApiModelProperty(required = true, value = "Array of items in that collection")

  public List<NetworkLoadBalancerForwardingRuleTarget> getTargets() {
    return targets;
  }


  public void setTargets(List<NetworkLoadBalancerForwardingRuleTarget> targets) {
    this.targets = targets;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkLoadBalancerForwardingRuleProperties networkLoadBalancerForwardingRuleProperties = (NetworkLoadBalancerForwardingRuleProperties) o;
    return Objects.equals(this.name, networkLoadBalancerForwardingRuleProperties.name) && Objects.equals(this.algorithm, networkLoadBalancerForwardingRuleProperties.algorithm) && Objects.equals(this.protocol, networkLoadBalancerForwardingRuleProperties.protocol) && Objects.equals(this.listenerIp, networkLoadBalancerForwardingRuleProperties.listenerIp) && Objects.equals(this.listenerPort, networkLoadBalancerForwardingRuleProperties.listenerPort) && Objects.equals(this.healthCheck, networkLoadBalancerForwardingRuleProperties.healthCheck) && Objects.equals(this.targets, networkLoadBalancerForwardingRuleProperties.targets);
  }




  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkLoadBalancerForwardingRuleProperties {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    algorithm: ").append(toIndentedString(algorithm)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    listenerIp: ").append(toIndentedString(listenerIp)).append("\n");
    sb.append("    listenerPort: ").append(toIndentedString(listenerPort)).append("\n");
    sb.append("    healthCheck: ").append(toIndentedString(healthCheck)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

