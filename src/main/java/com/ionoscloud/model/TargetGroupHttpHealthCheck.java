/*
 * CLOUD API
 * IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * The version of the OpenAPI document: 6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * TargetGroupHttpHealthCheck
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-08T12:49:39.918Z[Etc/UTC]")

public class TargetGroupHttpHealthCheck {
  
  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;


  /**
   * The method for the HTTP health check.
   */
  @JsonAdapter(MethodEnum.Adapter.class)
  public enum MethodEnum {
    HEAD("HEAD"),
    
    PUT("PUT"),
    
    POST("POST"),
    
    GET("GET"),
    
    TRACE("TRACE"),
    
    PATCH("PATCH"),
    
    OPTIONS("OPTIONS");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MethodEnum fromValue(String value) {

      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<MethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private MethodEnum method;


  /**
   * 
   */
  @JsonAdapter(MatchTypeEnum.Adapter.class)
  public enum MatchTypeEnum {
    STATUS_CODE("STATUS_CODE"),
    
    RESPONSE_BODY("RESPONSE_BODY");

    private String value;

    MatchTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MatchTypeEnum fromValue(String value) {

      for (MatchTypeEnum b : MatchTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<MatchTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MatchTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MatchTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MatchTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MATCH_TYPE = "matchType";
  @SerializedName(SERIALIZED_NAME_MATCH_TYPE)
  private MatchTypeEnum matchType;


  public static final String SERIALIZED_NAME_RESPONSE = "response";
  @SerializedName(SERIALIZED_NAME_RESPONSE)
  private String response;


  public static final String SERIALIZED_NAME_REGEX = "regex";
  @SerializedName(SERIALIZED_NAME_REGEX)
  private Boolean regex;


  public static final String SERIALIZED_NAME_NEGATE = "negate";
  @SerializedName(SERIALIZED_NAME_NEGATE)
  private Boolean negate;

  

  public TargetGroupHttpHealthCheck path(String path) {
    
    this.path = path;
    return this;
  }

   /**
   * The path (destination URL) for the HTTP health check request; the default is /.
   * @return path
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "/monitoring", value = "The path (destination URL) for the HTTP health check request; the default is /.")

  public String getPath() {
    return path;
  }


  public void setPath(String path) {
    this.path = path;
  }



  public TargetGroupHttpHealthCheck method(MethodEnum method) {
    
    this.method = method;
    return this;
  }

   /**
   * The method for the HTTP health check.
   * @return method
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "GET", value = "The method for the HTTP health check.")

  public MethodEnum getMethod() {
    return method;
  }


  public void setMethod(MethodEnum method) {
    this.method = method;
  }



  public TargetGroupHttpHealthCheck matchType(MatchTypeEnum matchType) {
    
    this.matchType = matchType;
    return this;
  }

   /**
   * 
   * @return matchType
  **/
  @ApiModelProperty(example = "STATUS_CODE", required = true, value = "")

  public MatchTypeEnum getMatchType() {
    return matchType;
  }


  public void setMatchType(MatchTypeEnum matchType) {
    this.matchType = matchType;
  }



  public TargetGroupHttpHealthCheck response(String response) {
    
    this.response = response;
    return this;
  }

   /**
   * The response returned by the request, depending on the match type.
   * @return response
  **/
  @ApiModelProperty(example = "200", required = true, value = "The response returned by the request, depending on the match type.")

  public String getResponse() {
    return response;
  }


  public void setResponse(String response) {
    this.response = response;
  }



  public TargetGroupHttpHealthCheck regex(Boolean regex) {
    
    this.regex = regex;
    return this;
  }

   /**
   * 
   * @return regex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "")

  public Boolean getRegex() {
    return regex;
  }


  public void setRegex(Boolean regex) {
    this.regex = regex;
  }



  public TargetGroupHttpHealthCheck negate(Boolean negate) {
    
    this.negate = negate;
    return this;
  }

   /**
   * 
   * @return negate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "")

  public Boolean getNegate() {
    return negate;
  }


  public void setNegate(Boolean negate) {
    this.negate = negate;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TargetGroupHttpHealthCheck targetGroupHttpHealthCheck = (TargetGroupHttpHealthCheck) o;
    return Objects.equals(this.path, targetGroupHttpHealthCheck.path) && Objects.equals(this.method, targetGroupHttpHealthCheck.method) && Objects.equals(this.matchType, targetGroupHttpHealthCheck.matchType) && Objects.equals(this.response, targetGroupHttpHealthCheck.response) && Objects.equals(this.regex, targetGroupHttpHealthCheck.regex) && Objects.equals(this.negate, targetGroupHttpHealthCheck.negate);
  }




  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TargetGroupHttpHealthCheck {\n");
    
    sb.append("    path: ").append(toIndentedString(path)).append("\n");

    sb.append("    method: ").append(toIndentedString(method)).append("\n");

    sb.append("    matchType: ").append(toIndentedString(matchType)).append("\n");

    sb.append("    response: ").append(toIndentedString(response)).append("\n");

    sb.append("    regex: ").append(toIndentedString(regex)).append("\n");

    sb.append("    negate: ").append(toIndentedString(negate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

