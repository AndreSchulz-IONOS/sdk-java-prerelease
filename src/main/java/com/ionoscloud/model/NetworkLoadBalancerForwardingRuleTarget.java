/*
 * CLOUD API
 * An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * The version of the OpenAPI document: 6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ionoscloud.model.NetworkLoadBalancerForwardingRuleTargetHealthCheck;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * NetworkLoadBalancerForwardingRuleTarget
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-03-03T14:20:00.275Z[Etc/UTC]")

public class NetworkLoadBalancerForwardingRuleTarget {
  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Integer weight;

  public static final String SERIALIZED_NAME_HEALTH_CHECK = "healthCheck";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK)
  private NetworkLoadBalancerForwardingRuleTargetHealthCheck healthCheck;


  public NetworkLoadBalancerForwardingRuleTarget ip(String ip) {
    
    this.ip = ip;
    return this;
  }

   /**
   * IP of a balanced target VM
   * @return ip
  **/
  @ApiModelProperty(example = "22.231.2.2", required = true, value = "IP of a balanced target VM")

  public String getIp() {
    return ip;
  }


  public void setIp(String ip) {
    this.ip = ip;
  }


  public NetworkLoadBalancerForwardingRuleTarget port(Integer port) {
    
    this.port = port;
    return this;
  }

   /**
   * Port of the balanced target service. (range: 1 to 65535)
   * @return port
  **/
  @ApiModelProperty(example = "8080", required = true, value = "Port of the balanced target service. (range: 1 to 65535)")

  public Integer getPort() {
    return port;
  }


  public void setPort(Integer port) {
    this.port = port;
  }


  public NetworkLoadBalancerForwardingRuleTarget weight(Integer weight) {
    
    this.weight = weight;
    return this;
  }

   /**
   * Weight parameter is used to adjust the target VM&#39;s weight relative to other target VMs. All target VMs will receive a load proportional to their weight relative to the sum of all weights, so the higher the weight, the higher the load. The default weight is 1, and the maximal value is 256. A value of 0 means the target VM will not participate in load-balancing but will still accept persistent connections. If this parameter is used to distribute the load according to target VM&#39;s capacity, it is recommended to start with values which can both grow and shrink, for instance between 10 and 100 to leave enough room above and below for later adjustments.
   * @return weight
  **/
  @ApiModelProperty(example = "123", required = true, value = "Weight parameter is used to adjust the target VM's weight relative to other target VMs. All target VMs will receive a load proportional to their weight relative to the sum of all weights, so the higher the weight, the higher the load. The default weight is 1, and the maximal value is 256. A value of 0 means the target VM will not participate in load-balancing but will still accept persistent connections. If this parameter is used to distribute the load according to target VM's capacity, it is recommended to start with values which can both grow and shrink, for instance between 10 and 100 to leave enough room above and below for later adjustments.")

  public Integer getWeight() {
    return weight;
  }


  public void setWeight(Integer weight) {
    this.weight = weight;
  }


  public NetworkLoadBalancerForwardingRuleTarget healthCheck(NetworkLoadBalancerForwardingRuleTargetHealthCheck healthCheck) {
    
    this.healthCheck = healthCheck;
    return this;
  }

   /**
   * Get healthCheck
   * @return healthCheck
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NetworkLoadBalancerForwardingRuleTargetHealthCheck getHealthCheck() {
    return healthCheck;
  }


  public void setHealthCheck(NetworkLoadBalancerForwardingRuleTargetHealthCheck healthCheck) {
    this.healthCheck = healthCheck;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkLoadBalancerForwardingRuleTarget networkLoadBalancerForwardingRuleTarget = (NetworkLoadBalancerForwardingRuleTarget) o;
    return Objects.equals(this.ip, networkLoadBalancerForwardingRuleTarget.ip) && Objects.equals(this.port, networkLoadBalancerForwardingRuleTarget.port) && Objects.equals(this.weight, networkLoadBalancerForwardingRuleTarget.weight) && Objects.equals(this.healthCheck, networkLoadBalancerForwardingRuleTarget.healthCheck);
  }




  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkLoadBalancerForwardingRuleTarget {\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    healthCheck: ").append(toIndentedString(healthCheck)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

