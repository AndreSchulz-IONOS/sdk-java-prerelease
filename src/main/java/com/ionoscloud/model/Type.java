/*
 * CLOUD API
 * IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * The version of the OpenAPI document: 6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets Type
 */
@JsonAdapter(Type.Adapter.class)
public enum Type {
  
  DATACENTER("datacenter"),
  
  SERVER("server"),
  
  VOLUME("volume"),
  
  NIC("nic"),
  
  LOADBALANCER("loadbalancer"),
  
  LOCATION("location"),
  
  FIREWALL_RULE("firewall-rule"),
  
  FLOW_LOG("flow-log"),
  
  IMAGE("image"),
  
  SNAPSHOT("snapshot"),
  
  LAN("lan"),
  
  IPBLOCK("ipblock"),
  
  PCC("pcc"),
  
  CONTRACT("contract"),
  
  USER("user"),
  
  GROUP("group"),
  
  COLLECTION("collection"),
  
  RESOURCE("resource"),
  
  REQUEST("request"),
  
  REQUEST_STATUS("request-status"),
  
  S3KEY("s3key"),
  
  BACKUPUNIT("backupunit"),
  
  LABEL("label"),
  
  K8S("k8s"),
  
  NODEPOOL("nodepool"),
  
  TEMPLATE("template"),
  
  NETWORKLOADBALANCER("networkloadbalancer"),
  
  FORWARDING_RULE("forwarding-rule"),
  
  NATGATEWAY("natgateway"),
  
  NATGATEWAY_RULE("natgateway-rule"),
  
  NODE("node"),
  
  APPLICATIONLOADBALANCER("applicationloadbalancer"),
  
  TARGET_GROUP("target-group");

  private String value;

  Type(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Type fromValue(String value) {
    for (Type b : Type.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    return null;
  }

  public static class Adapter extends TypeAdapter<Type> {
    @Override
    public void write(final JsonWriter jsonWriter, final Type enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Type read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Type.fromValue(value);
    }
  }
}

