/*
 * CLOUD API
 * IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * The version of the OpenAPI document: 6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.api;

import com.ionoscloud.ApiCallback;
import com.ionoscloud.ApiClient;
import com.ionoscloud.ApiException;
import com.ionoscloud.ApiResponse;
import com.ionoscloud.Configuration;
import com.ionoscloud.Pair;
import com.ionoscloud.ProgressRequestBody;
import com.ionoscloud.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ionoscloud.model.Error;
import com.ionoscloud.model.FlowLog;
import com.ionoscloud.model.FlowLogProperties;
import com.ionoscloud.model.FlowLogPut;
import com.ionoscloud.model.FlowLogs;
import com.ionoscloud.model.NatGateway;
import com.ionoscloud.model.NatGatewayProperties;
import com.ionoscloud.model.NatGatewayPut;
import com.ionoscloud.model.NatGatewayRule;
import com.ionoscloud.model.NatGatewayRuleProperties;
import com.ionoscloud.model.NatGatewayRulePut;
import com.ionoscloud.model.NatGatewayRules;
import com.ionoscloud.model.NatGateways;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NatGatewaysApi {
    private ApiClient localVarApiClient;

    public NatGatewaysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NatGatewaysApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for datacentersNatgatewaysDelete
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysDeleteCall(String datacenterId, String natGatewayId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback ) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "natGatewayId" + "\\}", localVarApiClient.escapeString(natGatewayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }
        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNatgatewaysDeleteValidateBeforeCall(String datacenterId, String natGatewayId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNatgatewaysDelete(Async)");
        }
        
        // verify the required parameter 'natGatewayId' is set
        if (natGatewayId == null) {
            throw new ApiException("Missing the required parameter 'natGatewayId' when calling datacentersNatgatewaysDelete(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNatgatewaysDeleteCall(datacenterId, natGatewayId, pretty, depth, xContractNumber, callback);
        return localVarCall;

    }

    /**
     * Delete NAT Gateways
     * Remove the specified NAT Gateway from the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public void datacentersNatgatewaysDelete(String datacenterId, String natGatewayId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        datacentersNatgatewaysDeleteWithHttpInfo(datacenterId, natGatewayId, pretty, depth, xContractNumber);
    }

    /**
     * Delete NAT Gateways
     * Remove the specified NAT Gateway from the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> datacentersNatgatewaysDeleteWithHttpInfo(String datacenterId, String natGatewayId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersNatgatewaysDeleteValidateBeforeCall(datacenterId, natGatewayId, pretty, depth, xContractNumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete NAT Gateways (asynchronously)
     * Remove the specified NAT Gateway from the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysDeleteAsync(String datacenterId, String natGatewayId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<Void> callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNatgatewaysDeleteValidateBeforeCall(datacenterId, natGatewayId, pretty, depth, xContractNumber, callback);
        localVarApiClient.executeAsync(localVarCall, callback);
        return localVarCall;
    }

    public class APIdatacentersNatgatewaysDeleteRequest {
        private final String datacenterId;
        private final String natGatewayId;
        private Boolean pretty;
        private Integer depth;
        private Integer xContractNumber;

        private APIdatacentersNatgatewaysDeleteRequest(String datacenterId, String natGatewayId) {
            this.datacenterId = datacenterId;
            this.natGatewayId = natGatewayId;
        }

        /**
         * Set pretty
         * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
         * @return APIdatacentersNatgatewaysDeleteRequest
         */
        public APIdatacentersNatgatewaysDeleteRequest pretty(Boolean pretty) {
            this.pretty = pretty;
            return this;
        }

        /**
         * Set depth
         * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
         * @return APIdatacentersNatgatewaysDeleteRequest
         */
        public APIdatacentersNatgatewaysDeleteRequest depth(Integer depth) {
            this.depth = depth;
            return this;
        }

        /**
         * Set xContractNumber
         * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
         * @return APIdatacentersNatgatewaysDeleteRequest
         */
        public APIdatacentersNatgatewaysDeleteRequest xContractNumber(Integer xContractNumber) {
            this.xContractNumber = xContractNumber;
            return this;
        }


        /**
         * Build call for datacentersNatgatewaysDelete
         * @param callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback callback) throws ApiException {
            return datacentersNatgatewaysDeleteCall(datacenterId, natGatewayId, pretty, depth, xContractNumber, callback);
        }

        /**
         * Execute datacentersNatgatewaysDelete request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
        datacentersNatgatewaysDeleteWithHttpInfo(datacenterId, natGatewayId, pretty, depth, xContractNumber);
        }

        /**
         * Execute datacentersNatgatewaysDelete request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return datacentersNatgatewaysDeleteWithHttpInfo(datacenterId, natGatewayId, pretty, depth, xContractNumber);
        }

        /**
         * Execute datacentersNatgatewaysDelete request (asynchronously)
         * @param callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> callback) throws ApiException {
            return datacentersNatgatewaysDeleteAsync(datacenterId, natGatewayId, pretty, depth, xContractNumber, callback);
        }
    }

    /**
     * Delete NAT Gateways
     * Remove the specified NAT Gateway from the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @return APIdatacentersNatgatewaysDeleteRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public APIdatacentersNatgatewaysDeleteRequest datacentersNatgatewaysDelete(String datacenterId, String natGatewayId) {
        return new APIdatacentersNatgatewaysDeleteRequest(datacenterId, natGatewayId);
    }
    /**
     * Build call for datacentersNatgatewaysFindByNatGatewayId
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysFindByNatGatewayIdCall(String datacenterId, String natGatewayId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback ) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "natGatewayId" + "\\}", localVarApiClient.escapeString(natGatewayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }
        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNatgatewaysFindByNatGatewayIdValidateBeforeCall(String datacenterId, String natGatewayId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNatgatewaysFindByNatGatewayId(Async)");
        }
        
        // verify the required parameter 'natGatewayId' is set
        if (natGatewayId == null) {
            throw new ApiException("Missing the required parameter 'natGatewayId' when calling datacentersNatgatewaysFindByNatGatewayId(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNatgatewaysFindByNatGatewayIdCall(datacenterId, natGatewayId, pretty, depth, xContractNumber, callback);
        return localVarCall;

    }

    /**
     * Retrieve NAT Gateways
     * Retrieve the properties of the specified NAT Gateway within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * 
     * @return NatGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public NatGateway datacentersNatgatewaysFindByNatGatewayId(String datacenterId, String natGatewayId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<NatGateway> localVarResp = datacentersNatgatewaysFindByNatGatewayIdWithHttpInfo(datacenterId, natGatewayId, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * Retrieve NAT Gateways
     * Retrieve the properties of the specified NAT Gateway within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * 
     * @return ApiResponse&lt;NatGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NatGateway> datacentersNatgatewaysFindByNatGatewayIdWithHttpInfo(String datacenterId, String natGatewayId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersNatgatewaysFindByNatGatewayIdValidateBeforeCall(datacenterId, natGatewayId, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<NatGateway>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve NAT Gateways (asynchronously)
     * Retrieve the properties of the specified NAT Gateway within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysFindByNatGatewayIdAsync(String datacenterId, String natGatewayId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NatGateway> callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNatgatewaysFindByNatGatewayIdValidateBeforeCall(datacenterId, natGatewayId, pretty, depth, xContractNumber, callback);
        Type localVarReturnType = new TypeToken<NatGateway>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return localVarCall;
    }

    public class APIdatacentersNatgatewaysFindByNatGatewayIdRequest {
        private final String datacenterId;
        private final String natGatewayId;
        private Boolean pretty;
        private Integer depth;
        private Integer xContractNumber;

        private APIdatacentersNatgatewaysFindByNatGatewayIdRequest(String datacenterId, String natGatewayId) {
            this.datacenterId = datacenterId;
            this.natGatewayId = natGatewayId;
        }

        /**
         * Set pretty
         * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
         * @return APIdatacentersNatgatewaysFindByNatGatewayIdRequest
         */
        public APIdatacentersNatgatewaysFindByNatGatewayIdRequest pretty(Boolean pretty) {
            this.pretty = pretty;
            return this;
        }

        /**
         * Set depth
         * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
         * @return APIdatacentersNatgatewaysFindByNatGatewayIdRequest
         */
        public APIdatacentersNatgatewaysFindByNatGatewayIdRequest depth(Integer depth) {
            this.depth = depth;
            return this;
        }

        /**
         * Set xContractNumber
         * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
         * @return APIdatacentersNatgatewaysFindByNatGatewayIdRequest
         */
        public APIdatacentersNatgatewaysFindByNatGatewayIdRequest xContractNumber(Integer xContractNumber) {
            this.xContractNumber = xContractNumber;
            return this;
        }


        /**
         * Build call for datacentersNatgatewaysFindByNatGatewayId
         * @param callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback callback) throws ApiException {
            return datacentersNatgatewaysFindByNatGatewayIdCall(datacenterId, natGatewayId, pretty, depth, xContractNumber, callback);
        }

        /**
         * Execute datacentersNatgatewaysFindByNatGatewayId request
         * @return NatGateway
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public NatGateway execute() throws ApiException {
        ApiResponse<NatGateway> localVarResp = datacentersNatgatewaysFindByNatGatewayIdWithHttpInfo(datacenterId, natGatewayId, pretty, depth, xContractNumber);
            return localVarResp.getData();
        }

        /**
         * Execute datacentersNatgatewaysFindByNatGatewayId request with HTTP info returned
         * @return ApiResponse&lt;NatGateway&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NatGateway> executeWithHttpInfo() throws ApiException {
            return datacentersNatgatewaysFindByNatGatewayIdWithHttpInfo(datacenterId, natGatewayId, pretty, depth, xContractNumber);
        }

        /**
         * Execute datacentersNatgatewaysFindByNatGatewayId request (asynchronously)
         * @param callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NatGateway> callback) throws ApiException {
            return datacentersNatgatewaysFindByNatGatewayIdAsync(datacenterId, natGatewayId, pretty, depth, xContractNumber, callback);
        }
    }

    /**
     * Retrieve NAT Gateways
     * Retrieve the properties of the specified NAT Gateway within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @return APIdatacentersNatgatewaysFindByNatGatewayIdRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public APIdatacentersNatgatewaysFindByNatGatewayIdRequest datacentersNatgatewaysFindByNatGatewayId(String datacenterId, String natGatewayId) {
        return new APIdatacentersNatgatewaysFindByNatGatewayIdRequest(datacenterId, natGatewayId);
    }
    /**
     * Build call for datacentersNatgatewaysFlowlogsDelete
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysFlowlogsDeleteCall(String datacenterId, String natGatewayId, String flowLogId, Boolean pretty, Integer depth, final ApiCallback callback ) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}/flowlogs/{flowLogId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "natGatewayId" + "\\}", localVarApiClient.escapeString(natGatewayId.toString()))
            .replaceAll("\\{" + "flowLogId" + "\\}", localVarApiClient.escapeString(flowLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }
        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNatgatewaysFlowlogsDeleteValidateBeforeCall(String datacenterId, String natGatewayId, String flowLogId, Boolean pretty, Integer depth, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNatgatewaysFlowlogsDelete(Async)");
        }
        
        // verify the required parameter 'natGatewayId' is set
        if (natGatewayId == null) {
            throw new ApiException("Missing the required parameter 'natGatewayId' when calling datacentersNatgatewaysFlowlogsDelete(Async)");
        }
        
        // verify the required parameter 'flowLogId' is set
        if (flowLogId == null) {
            throw new ApiException("Missing the required parameter 'flowLogId' when calling datacentersNatgatewaysFlowlogsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNatgatewaysFlowlogsDeleteCall(datacenterId, natGatewayId, flowLogId, pretty, depth, callback);
        return localVarCall;

    }

    /**
     * Delete NAT Gateway Flow Logs
     * Delete the specified NAT Gateway Flow Log.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public void datacentersNatgatewaysFlowlogsDelete(String datacenterId, String natGatewayId, String flowLogId, Boolean pretty, Integer depth) throws ApiException {
        datacentersNatgatewaysFlowlogsDeleteWithHttpInfo(datacenterId, natGatewayId, flowLogId, pretty, depth);
    }

    /**
     * Delete NAT Gateway Flow Logs
     * Delete the specified NAT Gateway Flow Log.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> datacentersNatgatewaysFlowlogsDeleteWithHttpInfo(String datacenterId, String natGatewayId, String flowLogId, Boolean pretty, Integer depth) throws ApiException {
        okhttp3.Call localVarCall = datacentersNatgatewaysFlowlogsDeleteValidateBeforeCall(datacenterId, natGatewayId, flowLogId, pretty, depth, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete NAT Gateway Flow Logs (asynchronously)
     * Delete the specified NAT Gateway Flow Log.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysFlowlogsDeleteAsync(String datacenterId, String natGatewayId, String flowLogId, Boolean pretty, Integer depth, final ApiCallback<Void> callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNatgatewaysFlowlogsDeleteValidateBeforeCall(datacenterId, natGatewayId, flowLogId, pretty, depth, callback);
        localVarApiClient.executeAsync(localVarCall, callback);
        return localVarCall;
    }

    public class APIdatacentersNatgatewaysFlowlogsDeleteRequest {
        private final String datacenterId;
        private final String natGatewayId;
        private final String flowLogId;
        private Boolean pretty;
        private Integer depth;

        private APIdatacentersNatgatewaysFlowlogsDeleteRequest(String datacenterId, String natGatewayId, String flowLogId) {
            this.datacenterId = datacenterId;
            this.natGatewayId = natGatewayId;
            this.flowLogId = flowLogId;
        }

        /**
         * Set pretty
         * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
         * @return APIdatacentersNatgatewaysFlowlogsDeleteRequest
         */
        public APIdatacentersNatgatewaysFlowlogsDeleteRequest pretty(Boolean pretty) {
            this.pretty = pretty;
            return this;
        }

        /**
         * Set depth
         * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
         * @return APIdatacentersNatgatewaysFlowlogsDeleteRequest
         */
        public APIdatacentersNatgatewaysFlowlogsDeleteRequest depth(Integer depth) {
            this.depth = depth;
            return this;
        }


        /**
         * Build call for datacentersNatgatewaysFlowlogsDelete
         * @param callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback callback) throws ApiException {
            return datacentersNatgatewaysFlowlogsDeleteCall(datacenterId, natGatewayId, flowLogId, pretty, depth, callback);
        }

        /**
         * Execute datacentersNatgatewaysFlowlogsDelete request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
        datacentersNatgatewaysFlowlogsDeleteWithHttpInfo(datacenterId, natGatewayId, flowLogId, pretty, depth);
        }

        /**
         * Execute datacentersNatgatewaysFlowlogsDelete request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return datacentersNatgatewaysFlowlogsDeleteWithHttpInfo(datacenterId, natGatewayId, flowLogId, pretty, depth);
        }

        /**
         * Execute datacentersNatgatewaysFlowlogsDelete request (asynchronously)
         * @param callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> callback) throws ApiException {
            return datacentersNatgatewaysFlowlogsDeleteAsync(datacenterId, natGatewayId, flowLogId, pretty, depth, callback);
        }
    }

    /**
     * Delete NAT Gateway Flow Logs
     * Delete the specified NAT Gateway Flow Log.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @return APIdatacentersNatgatewaysFlowlogsDeleteRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public APIdatacentersNatgatewaysFlowlogsDeleteRequest datacentersNatgatewaysFlowlogsDelete(String datacenterId, String natGatewayId, String flowLogId) {
        return new APIdatacentersNatgatewaysFlowlogsDeleteRequest(datacenterId, natGatewayId, flowLogId);
    }
    /**
     * Build call for datacentersNatgatewaysFlowlogsFindByFlowLogId
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysFlowlogsFindByFlowLogIdCall(String datacenterId, String natGatewayId, String flowLogId, Boolean pretty, Integer depth, final ApiCallback callback ) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}/flowlogs/{flowLogId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "natGatewayId" + "\\}", localVarApiClient.escapeString(natGatewayId.toString()))
            .replaceAll("\\{" + "flowLogId" + "\\}", localVarApiClient.escapeString(flowLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }
        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNatgatewaysFlowlogsFindByFlowLogIdValidateBeforeCall(String datacenterId, String natGatewayId, String flowLogId, Boolean pretty, Integer depth, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNatgatewaysFlowlogsFindByFlowLogId(Async)");
        }
        
        // verify the required parameter 'natGatewayId' is set
        if (natGatewayId == null) {
            throw new ApiException("Missing the required parameter 'natGatewayId' when calling datacentersNatgatewaysFlowlogsFindByFlowLogId(Async)");
        }
        
        // verify the required parameter 'flowLogId' is set
        if (flowLogId == null) {
            throw new ApiException("Missing the required parameter 'flowLogId' when calling datacentersNatgatewaysFlowlogsFindByFlowLogId(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNatgatewaysFlowlogsFindByFlowLogIdCall(datacenterId, natGatewayId, flowLogId, pretty, depth, callback);
        return localVarCall;

    }

    /**
     * Retrieve NAT Gateway Flow Logs
     * Retrieve the specified NAT Gateway Flow Log.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * 
     * @return FlowLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public FlowLog datacentersNatgatewaysFlowlogsFindByFlowLogId(String datacenterId, String natGatewayId, String flowLogId, Boolean pretty, Integer depth) throws ApiException {
        ApiResponse<FlowLog> localVarResp = datacentersNatgatewaysFlowlogsFindByFlowLogIdWithHttpInfo(datacenterId, natGatewayId, flowLogId, pretty, depth);
        return localVarResp.getData();
    }

    /**
     * Retrieve NAT Gateway Flow Logs
     * Retrieve the specified NAT Gateway Flow Log.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * 
     * @return ApiResponse&lt;FlowLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlowLog> datacentersNatgatewaysFlowlogsFindByFlowLogIdWithHttpInfo(String datacenterId, String natGatewayId, String flowLogId, Boolean pretty, Integer depth) throws ApiException {
        okhttp3.Call localVarCall = datacentersNatgatewaysFlowlogsFindByFlowLogIdValidateBeforeCall(datacenterId, natGatewayId, flowLogId, pretty, depth, null);
        Type localVarReturnType = new TypeToken<FlowLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve NAT Gateway Flow Logs (asynchronously)
     * Retrieve the specified NAT Gateway Flow Log.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysFlowlogsFindByFlowLogIdAsync(String datacenterId, String natGatewayId, String flowLogId, Boolean pretty, Integer depth, final ApiCallback<FlowLog> callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNatgatewaysFlowlogsFindByFlowLogIdValidateBeforeCall(datacenterId, natGatewayId, flowLogId, pretty, depth, callback);
        Type localVarReturnType = new TypeToken<FlowLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return localVarCall;
    }

    public class APIdatacentersNatgatewaysFlowlogsFindByFlowLogIdRequest {
        private final String datacenterId;
        private final String natGatewayId;
        private final String flowLogId;
        private Boolean pretty;
        private Integer depth;

        private APIdatacentersNatgatewaysFlowlogsFindByFlowLogIdRequest(String datacenterId, String natGatewayId, String flowLogId) {
            this.datacenterId = datacenterId;
            this.natGatewayId = natGatewayId;
            this.flowLogId = flowLogId;
        }

        /**
         * Set pretty
         * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
         * @return APIdatacentersNatgatewaysFlowlogsFindByFlowLogIdRequest
         */
        public APIdatacentersNatgatewaysFlowlogsFindByFlowLogIdRequest pretty(Boolean pretty) {
            this.pretty = pretty;
            return this;
        }

        /**
         * Set depth
         * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
         * @return APIdatacentersNatgatewaysFlowlogsFindByFlowLogIdRequest
         */
        public APIdatacentersNatgatewaysFlowlogsFindByFlowLogIdRequest depth(Integer depth) {
            this.depth = depth;
            return this;
        }


        /**
         * Build call for datacentersNatgatewaysFlowlogsFindByFlowLogId
         * @param callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback callback) throws ApiException {
            return datacentersNatgatewaysFlowlogsFindByFlowLogIdCall(datacenterId, natGatewayId, flowLogId, pretty, depth, callback);
        }

        /**
         * Execute datacentersNatgatewaysFlowlogsFindByFlowLogId request
         * @return FlowLog
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public FlowLog execute() throws ApiException {
        ApiResponse<FlowLog> localVarResp = datacentersNatgatewaysFlowlogsFindByFlowLogIdWithHttpInfo(datacenterId, natGatewayId, flowLogId, pretty, depth);
            return localVarResp.getData();
        }

        /**
         * Execute datacentersNatgatewaysFlowlogsFindByFlowLogId request with HTTP info returned
         * @return ApiResponse&lt;FlowLog&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FlowLog> executeWithHttpInfo() throws ApiException {
            return datacentersNatgatewaysFlowlogsFindByFlowLogIdWithHttpInfo(datacenterId, natGatewayId, flowLogId, pretty, depth);
        }

        /**
         * Execute datacentersNatgatewaysFlowlogsFindByFlowLogId request (asynchronously)
         * @param callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FlowLog> callback) throws ApiException {
            return datacentersNatgatewaysFlowlogsFindByFlowLogIdAsync(datacenterId, natGatewayId, flowLogId, pretty, depth, callback);
        }
    }

    /**
     * Retrieve NAT Gateway Flow Logs
     * Retrieve the specified NAT Gateway Flow Log.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @return APIdatacentersNatgatewaysFlowlogsFindByFlowLogIdRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public APIdatacentersNatgatewaysFlowlogsFindByFlowLogIdRequest datacentersNatgatewaysFlowlogsFindByFlowLogId(String datacenterId, String natGatewayId, String flowLogId) {
        return new APIdatacentersNatgatewaysFlowlogsFindByFlowLogIdRequest(datacenterId, natGatewayId, flowLogId);
    }
    /**
     * Build call for datacentersNatgatewaysFlowlogsGet
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param offset The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination). (optional, default to 0)
     * @param limit The maximum number of elements to return (use together with offset for pagination). (optional, default to 1000)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysFlowlogsGetCall(String datacenterId, String natGatewayId, Boolean pretty, Integer depth, Integer offset, Integer limit,  String orderBy, Integer maxResults, Map<String, String> filters,final ApiCallback callback ) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}/flowlogs"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "natGatewayId" + "\\}", localVarApiClient.escapeString(natGatewayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }
        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }
        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }
        if (filters != null) {
            filters.forEach((key, value) -> {
                localVarQueryParams.add(new Pair(String.format("filter.%s", key), value));
            });
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNatgatewaysFlowlogsGetValidateBeforeCall(String datacenterId, String natGatewayId, Boolean pretty, Integer depth, Integer offset, Integer limit,  String orderBy, Integer maxResults , Map<String, String> filters,final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNatgatewaysFlowlogsGet(Async)");
        }
        
        // verify the required parameter 'natGatewayId' is set
        if (natGatewayId == null) {
            throw new ApiException("Missing the required parameter 'natGatewayId' when calling datacentersNatgatewaysFlowlogsGet(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNatgatewaysFlowlogsGetCall(datacenterId, natGatewayId, pretty, depth, offset, limit,  orderBy, maxResults, filters,callback);
        return localVarCall;

    }

    /**
     * List NAT Gateway Flow Logs
     * List all the Flow Logs for the specified NAT Gateway.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param offset The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination). (optional, default to 0)
     * @param limit The maximum number of elements to return (use together with offset for pagination). (optional, default to 1000)
     * @param orderBy - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param maxResults - Limits the number of results returned.
     * @param filters - Filters query parameters limit results to those containing a matching value for a specific property.
     * @return FlowLogs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public FlowLogs datacentersNatgatewaysFlowlogsGet(String datacenterId, String natGatewayId, Boolean pretty, Integer depth, Integer offset, Integer limit,  String orderBy, Integer maxResults, Map<String, String> filters) throws ApiException {
        ApiResponse<FlowLogs> localVarResp = datacentersNatgatewaysFlowlogsGetWithHttpInfo(datacenterId, natGatewayId, pretty, depth, offset, limit, orderBy, maxResults, filters);
        return localVarResp.getData();
    }

    /**
     * List NAT Gateway Flow Logs
     * List all the Flow Logs for the specified NAT Gateway.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param offset The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination). (optional, default to 0)
     * @param limit The maximum number of elements to return (use together with offset for pagination). (optional, default to 1000)
     * @param orderBy - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param maxResults - Limits the number of results returned.
     * @param filters - Filters query parameters limit results to those containing a matching value for a specific property.
     * @return ApiResponse&lt;FlowLogs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlowLogs> datacentersNatgatewaysFlowlogsGetWithHttpInfo(String datacenterId, String natGatewayId, Boolean pretty, Integer depth, Integer offset, Integer limit, String orderBy, Integer maxResults, Map<String, String> filters) throws ApiException {
        okhttp3.Call localVarCall = datacentersNatgatewaysFlowlogsGetValidateBeforeCall(datacenterId, natGatewayId, pretty, depth, offset, limit,  orderBy, maxResults, filters, null);
        Type localVarReturnType = new TypeToken<FlowLogs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List NAT Gateway Flow Logs (asynchronously)
     * List all the Flow Logs for the specified NAT Gateway.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param offset The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination). (optional, default to 0)
     * @param limit The maximum number of elements to return (use together with offset for pagination). (optional, default to 1000)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysFlowlogsGetAsync(String datacenterId, String natGatewayId, Boolean pretty, Integer depth, Integer offset, Integer limit, String orderBy, Integer maxResults, Map<String, String> filters,final ApiCallback<FlowLogs> callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNatgatewaysFlowlogsGetValidateBeforeCall(datacenterId, natGatewayId, pretty, depth, offset, limit,  orderBy, maxResults, filters, callback);
        Type localVarReturnType = new TypeToken<FlowLogs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return localVarCall;
    }

    public class APIdatacentersNatgatewaysFlowlogsGetRequest {
        private final String datacenterId;
        private final String natGatewayId;
        private Boolean pretty;
        private Integer depth;
        private Integer offset;
        private Integer limit;
        private String orderBy;
        private Integer maxResults;
        private Map<String, String> filters;

        private APIdatacentersNatgatewaysFlowlogsGetRequest(String datacenterId, String natGatewayId) {
            this.datacenterId = datacenterId;
            this.natGatewayId = natGatewayId;
        }

        /**
         * Set pretty
         * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
         * @return APIdatacentersNatgatewaysFlowlogsGetRequest
         */
        public APIdatacentersNatgatewaysFlowlogsGetRequest pretty(Boolean pretty) {
            this.pretty = pretty;
            return this;
        }

        /**
         * Set depth
         * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
         * @return APIdatacentersNatgatewaysFlowlogsGetRequest
         */
        public APIdatacentersNatgatewaysFlowlogsGetRequest depth(Integer depth) {
            this.depth = depth;
            return this;
        }

        /**
         * Set offset
         * @param offset The first element (from the complete list of the elements) to include in the response (used together with &lt;b&gt;&lt;i&gt;limit&lt;/i&gt;&lt;/b&gt; for pagination). (optional, default to 0)
         * @return APIdatacentersNatgatewaysFlowlogsGetRequest
         */
        public APIdatacentersNatgatewaysFlowlogsGetRequest offset(Integer offset) {
            this.offset = offset;
            return this;
        }

        /**
         * Set limit
         * @param limit The maximum number of elements to return (use together with offset for pagination). (optional, default to 1000)
         * @return APIdatacentersNatgatewaysFlowlogsGetRequest
         */
        public APIdatacentersNatgatewaysFlowlogsGetRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }


        /**
        * Set orderBy
        * @param orderBy Orders the response based on a property.
        * @return APIdatacentersNatgatewaysFlowlogsGetRequest
        */
        public APIdatacentersNatgatewaysFlowlogsGetRequest orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }

        /**
        * Set maxResults
        * @param maxResults Limits the number of items in a response.
        * @return APIdatacentersNatgatewaysFlowlogsGetRequest
        */
        public APIdatacentersNatgatewaysFlowlogsGetRequest maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }

        /**
        * Set filters
        * @param filters Filters the response based on a property.
        * @return APIdatacentersNatgatewaysFlowlogsGetRequest
        */
        public APIdatacentersNatgatewaysFlowlogsGetRequest filters(Map<String, String> filters) {
            this.filters = filters;
            return this;
        }


        /**
         * Build call for datacentersNatgatewaysFlowlogsGet
         * @param callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback callback) throws ApiException {
            return datacentersNatgatewaysFlowlogsGetCall(datacenterId, natGatewayId, pretty, depth, offset, limit, orderBy, maxResults, filters, callback);
        }

        /**
         * Execute datacentersNatgatewaysFlowlogsGet request
         * @return FlowLogs
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public FlowLogs execute() throws ApiException {
        ApiResponse<FlowLogs> localVarResp = datacentersNatgatewaysFlowlogsGetWithHttpInfo(datacenterId, natGatewayId, pretty, depth, offset, limit, orderBy, maxResults, filters);
            return localVarResp.getData();
        }

        /**
         * Execute datacentersNatgatewaysFlowlogsGet request with HTTP info returned
         * @return ApiResponse&lt;FlowLogs&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FlowLogs> executeWithHttpInfo() throws ApiException {
            return datacentersNatgatewaysFlowlogsGetWithHttpInfo(datacenterId, natGatewayId, pretty, depth, offset, limit, orderBy, maxResults, filters);
        }

        /**
         * Execute datacentersNatgatewaysFlowlogsGet request (asynchronously)
         * @param callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FlowLogs> callback) throws ApiException {
            return datacentersNatgatewaysFlowlogsGetAsync(datacenterId, natGatewayId, pretty, depth, offset, limit, orderBy, maxResults, filters, callback);
        }
    }

    /**
     * List NAT Gateway Flow Logs
     * List all the Flow Logs for the specified NAT Gateway.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @return APIdatacentersNatgatewaysFlowlogsGetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public APIdatacentersNatgatewaysFlowlogsGetRequest datacentersNatgatewaysFlowlogsGet(String datacenterId, String natGatewayId) {
        return new APIdatacentersNatgatewaysFlowlogsGetRequest(datacenterId, natGatewayId);
    }
    /**
     * Build call for datacentersNatgatewaysFlowlogsPatch
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param natGatewayFlowLogProperties The properties of the Flow Log to be updated. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysFlowlogsPatchCall(String datacenterId, String natGatewayId, String flowLogId, FlowLogProperties natGatewayFlowLogProperties, Boolean pretty, Integer depth, final ApiCallback callback ) throws ApiException {
        Object localVarPostBody = natGatewayFlowLogProperties;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}/flowlogs/{flowLogId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "natGatewayId" + "\\}", localVarApiClient.escapeString(natGatewayId.toString()))
            .replaceAll("\\{" + "flowLogId" + "\\}", localVarApiClient.escapeString(flowLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }
        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNatgatewaysFlowlogsPatchValidateBeforeCall(String datacenterId, String natGatewayId, String flowLogId, FlowLogProperties natGatewayFlowLogProperties, Boolean pretty, Integer depth, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNatgatewaysFlowlogsPatch(Async)");
        }
        
        // verify the required parameter 'natGatewayId' is set
        if (natGatewayId == null) {
            throw new ApiException("Missing the required parameter 'natGatewayId' when calling datacentersNatgatewaysFlowlogsPatch(Async)");
        }
        
        // verify the required parameter 'flowLogId' is set
        if (flowLogId == null) {
            throw new ApiException("Missing the required parameter 'flowLogId' when calling datacentersNatgatewaysFlowlogsPatch(Async)");
        }
        
        // verify the required parameter 'natGatewayFlowLogProperties' is set
        if (natGatewayFlowLogProperties == null) {
            throw new ApiException("Missing the required parameter 'natGatewayFlowLogProperties' when calling datacentersNatgatewaysFlowlogsPatch(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNatgatewaysFlowlogsPatchCall(datacenterId, natGatewayId, flowLogId, natGatewayFlowLogProperties, pretty, depth, callback);
        return localVarCall;

    }

    /**
     * Partially modify NAT Gateway Flow Logs
     * Update the properties of the specified NAT Gateway Flow Log.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param natGatewayFlowLogProperties The properties of the Flow Log to be updated. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * 
     * @return FlowLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public FlowLog datacentersNatgatewaysFlowlogsPatch(String datacenterId, String natGatewayId, String flowLogId, FlowLogProperties natGatewayFlowLogProperties, Boolean pretty, Integer depth) throws ApiException {
        ApiResponse<FlowLog> localVarResp = datacentersNatgatewaysFlowlogsPatchWithHttpInfo(datacenterId, natGatewayId, flowLogId, natGatewayFlowLogProperties, pretty, depth);
        return localVarResp.getData();
    }

    /**
     * Partially modify NAT Gateway Flow Logs
     * Update the properties of the specified NAT Gateway Flow Log.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param natGatewayFlowLogProperties The properties of the Flow Log to be updated. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * 
     * @return ApiResponse&lt;FlowLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlowLog> datacentersNatgatewaysFlowlogsPatchWithHttpInfo(String datacenterId, String natGatewayId, String flowLogId, FlowLogProperties natGatewayFlowLogProperties, Boolean pretty, Integer depth) throws ApiException {
        okhttp3.Call localVarCall = datacentersNatgatewaysFlowlogsPatchValidateBeforeCall(datacenterId, natGatewayId, flowLogId, natGatewayFlowLogProperties, pretty, depth, null);
        Type localVarReturnType = new TypeToken<FlowLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Partially modify NAT Gateway Flow Logs (asynchronously)
     * Update the properties of the specified NAT Gateway Flow Log.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param natGatewayFlowLogProperties The properties of the Flow Log to be updated. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysFlowlogsPatchAsync(String datacenterId, String natGatewayId, String flowLogId, FlowLogProperties natGatewayFlowLogProperties, Boolean pretty, Integer depth, final ApiCallback<FlowLog> callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNatgatewaysFlowlogsPatchValidateBeforeCall(datacenterId, natGatewayId, flowLogId, natGatewayFlowLogProperties, pretty, depth, callback);
        Type localVarReturnType = new TypeToken<FlowLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return localVarCall;
    }

    public class APIdatacentersNatgatewaysFlowlogsPatchRequest {
        private final String datacenterId;
        private final String natGatewayId;
        private final String flowLogId;
        private final FlowLogProperties natGatewayFlowLogProperties;
        private Boolean pretty;
        private Integer depth;

        private APIdatacentersNatgatewaysFlowlogsPatchRequest(String datacenterId, String natGatewayId, String flowLogId, FlowLogProperties natGatewayFlowLogProperties) {
            this.datacenterId = datacenterId;
            this.natGatewayId = natGatewayId;
            this.flowLogId = flowLogId;
            this.natGatewayFlowLogProperties = natGatewayFlowLogProperties;
        }

        /**
         * Set pretty
         * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
         * @return APIdatacentersNatgatewaysFlowlogsPatchRequest
         */
        public APIdatacentersNatgatewaysFlowlogsPatchRequest pretty(Boolean pretty) {
            this.pretty = pretty;
            return this;
        }

        /**
         * Set depth
         * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
         * @return APIdatacentersNatgatewaysFlowlogsPatchRequest
         */
        public APIdatacentersNatgatewaysFlowlogsPatchRequest depth(Integer depth) {
            this.depth = depth;
            return this;
        }


        /**
         * Build call for datacentersNatgatewaysFlowlogsPatch
         * @param callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback callback) throws ApiException {
            return datacentersNatgatewaysFlowlogsPatchCall(datacenterId, natGatewayId, flowLogId, natGatewayFlowLogProperties, pretty, depth, callback);
        }

        /**
         * Execute datacentersNatgatewaysFlowlogsPatch request
         * @return FlowLog
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public FlowLog execute() throws ApiException {
        ApiResponse<FlowLog> localVarResp = datacentersNatgatewaysFlowlogsPatchWithHttpInfo(datacenterId, natGatewayId, flowLogId, natGatewayFlowLogProperties, pretty, depth);
            return localVarResp.getData();
        }

        /**
         * Execute datacentersNatgatewaysFlowlogsPatch request with HTTP info returned
         * @return ApiResponse&lt;FlowLog&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FlowLog> executeWithHttpInfo() throws ApiException {
            return datacentersNatgatewaysFlowlogsPatchWithHttpInfo(datacenterId, natGatewayId, flowLogId, natGatewayFlowLogProperties, pretty, depth);
        }

        /**
         * Execute datacentersNatgatewaysFlowlogsPatch request (asynchronously)
         * @param callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FlowLog> callback) throws ApiException {
            return datacentersNatgatewaysFlowlogsPatchAsync(datacenterId, natGatewayId, flowLogId, natGatewayFlowLogProperties, pretty, depth, callback);
        }
    }

    /**
     * Partially modify NAT Gateway Flow Logs
     * Update the properties of the specified NAT Gateway Flow Log.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param natGatewayFlowLogProperties The properties of the Flow Log to be updated. (required)
     * @return APIdatacentersNatgatewaysFlowlogsPatchRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public APIdatacentersNatgatewaysFlowlogsPatchRequest datacentersNatgatewaysFlowlogsPatch(String datacenterId, String natGatewayId, String flowLogId, FlowLogProperties natGatewayFlowLogProperties) {
        return new APIdatacentersNatgatewaysFlowlogsPatchRequest(datacenterId, natGatewayId, flowLogId, natGatewayFlowLogProperties);
    }
    /**
     * Build call for datacentersNatgatewaysFlowlogsPost
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayFlowLog The Flow Log to create. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysFlowlogsPostCall(String datacenterId, String natGatewayId, FlowLog natGatewayFlowLog, Boolean pretty, Integer depth, final ApiCallback callback ) throws ApiException {
        Object localVarPostBody = natGatewayFlowLog;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}/flowlogs"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "natGatewayId" + "\\}", localVarApiClient.escapeString(natGatewayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }
        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNatgatewaysFlowlogsPostValidateBeforeCall(String datacenterId, String natGatewayId, FlowLog natGatewayFlowLog, Boolean pretty, Integer depth, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNatgatewaysFlowlogsPost(Async)");
        }
        
        // verify the required parameter 'natGatewayId' is set
        if (natGatewayId == null) {
            throw new ApiException("Missing the required parameter 'natGatewayId' when calling datacentersNatgatewaysFlowlogsPost(Async)");
        }
        
        // verify the required parameter 'natGatewayFlowLog' is set
        if (natGatewayFlowLog == null) {
            throw new ApiException("Missing the required parameter 'natGatewayFlowLog' when calling datacentersNatgatewaysFlowlogsPost(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNatgatewaysFlowlogsPostCall(datacenterId, natGatewayId, natGatewayFlowLog, pretty, depth, callback);
        return localVarCall;

    }

    /**
     * Create a NAT Gateway Flow Log
     * Adds a new Flow Log to the specified NAT Gateway.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayFlowLog The Flow Log to create. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * 
     * @return FlowLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public FlowLog datacentersNatgatewaysFlowlogsPost(String datacenterId, String natGatewayId, FlowLog natGatewayFlowLog, Boolean pretty, Integer depth) throws ApiException {
        ApiResponse<FlowLog> localVarResp = datacentersNatgatewaysFlowlogsPostWithHttpInfo(datacenterId, natGatewayId, natGatewayFlowLog, pretty, depth);
        return localVarResp.getData();
    }

    /**
     * Create a NAT Gateway Flow Log
     * Adds a new Flow Log to the specified NAT Gateway.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayFlowLog The Flow Log to create. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * 
     * @return ApiResponse&lt;FlowLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlowLog> datacentersNatgatewaysFlowlogsPostWithHttpInfo(String datacenterId, String natGatewayId, FlowLog natGatewayFlowLog, Boolean pretty, Integer depth) throws ApiException {
        okhttp3.Call localVarCall = datacentersNatgatewaysFlowlogsPostValidateBeforeCall(datacenterId, natGatewayId, natGatewayFlowLog, pretty, depth, null);
        Type localVarReturnType = new TypeToken<FlowLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a NAT Gateway Flow Log (asynchronously)
     * Adds a new Flow Log to the specified NAT Gateway.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayFlowLog The Flow Log to create. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysFlowlogsPostAsync(String datacenterId, String natGatewayId, FlowLog natGatewayFlowLog, Boolean pretty, Integer depth, final ApiCallback<FlowLog> callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNatgatewaysFlowlogsPostValidateBeforeCall(datacenterId, natGatewayId, natGatewayFlowLog, pretty, depth, callback);
        Type localVarReturnType = new TypeToken<FlowLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return localVarCall;
    }

    public class APIdatacentersNatgatewaysFlowlogsPostRequest {
        private final String datacenterId;
        private final String natGatewayId;
        private final FlowLog natGatewayFlowLog;
        private Boolean pretty;
        private Integer depth;

        private APIdatacentersNatgatewaysFlowlogsPostRequest(String datacenterId, String natGatewayId, FlowLog natGatewayFlowLog) {
            this.datacenterId = datacenterId;
            this.natGatewayId = natGatewayId;
            this.natGatewayFlowLog = natGatewayFlowLog;
        }

        /**
         * Set pretty
         * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
         * @return APIdatacentersNatgatewaysFlowlogsPostRequest
         */
        public APIdatacentersNatgatewaysFlowlogsPostRequest pretty(Boolean pretty) {
            this.pretty = pretty;
            return this;
        }

        /**
         * Set depth
         * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
         * @return APIdatacentersNatgatewaysFlowlogsPostRequest
         */
        public APIdatacentersNatgatewaysFlowlogsPostRequest depth(Integer depth) {
            this.depth = depth;
            return this;
        }


        /**
         * Build call for datacentersNatgatewaysFlowlogsPost
         * @param callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback callback) throws ApiException {
            return datacentersNatgatewaysFlowlogsPostCall(datacenterId, natGatewayId, natGatewayFlowLog, pretty, depth, callback);
        }

        /**
         * Execute datacentersNatgatewaysFlowlogsPost request
         * @return FlowLog
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public FlowLog execute() throws ApiException {
        ApiResponse<FlowLog> localVarResp = datacentersNatgatewaysFlowlogsPostWithHttpInfo(datacenterId, natGatewayId, natGatewayFlowLog, pretty, depth);
            return localVarResp.getData();
        }

        /**
         * Execute datacentersNatgatewaysFlowlogsPost request with HTTP info returned
         * @return ApiResponse&lt;FlowLog&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FlowLog> executeWithHttpInfo() throws ApiException {
            return datacentersNatgatewaysFlowlogsPostWithHttpInfo(datacenterId, natGatewayId, natGatewayFlowLog, pretty, depth);
        }

        /**
         * Execute datacentersNatgatewaysFlowlogsPost request (asynchronously)
         * @param callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FlowLog> callback) throws ApiException {
            return datacentersNatgatewaysFlowlogsPostAsync(datacenterId, natGatewayId, natGatewayFlowLog, pretty, depth, callback);
        }
    }

    /**
     * Create a NAT Gateway Flow Log
     * Adds a new Flow Log to the specified NAT Gateway.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayFlowLog The Flow Log to create. (required)
     * @return APIdatacentersNatgatewaysFlowlogsPostRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public APIdatacentersNatgatewaysFlowlogsPostRequest datacentersNatgatewaysFlowlogsPost(String datacenterId, String natGatewayId, FlowLog natGatewayFlowLog) {
        return new APIdatacentersNatgatewaysFlowlogsPostRequest(datacenterId, natGatewayId, natGatewayFlowLog);
    }
    /**
     * Build call for datacentersNatgatewaysFlowlogsPut
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param natGatewayFlowLog The modified NAT Gateway Flow Log. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysFlowlogsPutCall(String datacenterId, String natGatewayId, String flowLogId, FlowLogPut natGatewayFlowLog, Boolean pretty, Integer depth, final ApiCallback callback ) throws ApiException {
        Object localVarPostBody = natGatewayFlowLog;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}/flowlogs/{flowLogId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "natGatewayId" + "\\}", localVarApiClient.escapeString(natGatewayId.toString()))
            .replaceAll("\\{" + "flowLogId" + "\\}", localVarApiClient.escapeString(flowLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }
        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNatgatewaysFlowlogsPutValidateBeforeCall(String datacenterId, String natGatewayId, String flowLogId, FlowLogPut natGatewayFlowLog, Boolean pretty, Integer depth, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNatgatewaysFlowlogsPut(Async)");
        }
        
        // verify the required parameter 'natGatewayId' is set
        if (natGatewayId == null) {
            throw new ApiException("Missing the required parameter 'natGatewayId' when calling datacentersNatgatewaysFlowlogsPut(Async)");
        }
        
        // verify the required parameter 'flowLogId' is set
        if (flowLogId == null) {
            throw new ApiException("Missing the required parameter 'flowLogId' when calling datacentersNatgatewaysFlowlogsPut(Async)");
        }
        
        // verify the required parameter 'natGatewayFlowLog' is set
        if (natGatewayFlowLog == null) {
            throw new ApiException("Missing the required parameter 'natGatewayFlowLog' when calling datacentersNatgatewaysFlowlogsPut(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNatgatewaysFlowlogsPutCall(datacenterId, natGatewayId, flowLogId, natGatewayFlowLog, pretty, depth, callback);
        return localVarCall;

    }

    /**
     * Modify NAT Gateway Flow Logs
     * Modify the specified NAT Gateway Flow Log.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param natGatewayFlowLog The modified NAT Gateway Flow Log. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * 
     * @return FlowLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public FlowLog datacentersNatgatewaysFlowlogsPut(String datacenterId, String natGatewayId, String flowLogId, FlowLogPut natGatewayFlowLog, Boolean pretty, Integer depth) throws ApiException {
        ApiResponse<FlowLog> localVarResp = datacentersNatgatewaysFlowlogsPutWithHttpInfo(datacenterId, natGatewayId, flowLogId, natGatewayFlowLog, pretty, depth);
        return localVarResp.getData();
    }

    /**
     * Modify NAT Gateway Flow Logs
     * Modify the specified NAT Gateway Flow Log.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param natGatewayFlowLog The modified NAT Gateway Flow Log. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * 
     * @return ApiResponse&lt;FlowLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlowLog> datacentersNatgatewaysFlowlogsPutWithHttpInfo(String datacenterId, String natGatewayId, String flowLogId, FlowLogPut natGatewayFlowLog, Boolean pretty, Integer depth) throws ApiException {
        okhttp3.Call localVarCall = datacentersNatgatewaysFlowlogsPutValidateBeforeCall(datacenterId, natGatewayId, flowLogId, natGatewayFlowLog, pretty, depth, null);
        Type localVarReturnType = new TypeToken<FlowLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify NAT Gateway Flow Logs (asynchronously)
     * Modify the specified NAT Gateway Flow Log.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param natGatewayFlowLog The modified NAT Gateway Flow Log. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysFlowlogsPutAsync(String datacenterId, String natGatewayId, String flowLogId, FlowLogPut natGatewayFlowLog, Boolean pretty, Integer depth, final ApiCallback<FlowLog> callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNatgatewaysFlowlogsPutValidateBeforeCall(datacenterId, natGatewayId, flowLogId, natGatewayFlowLog, pretty, depth, callback);
        Type localVarReturnType = new TypeToken<FlowLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return localVarCall;
    }

    public class APIdatacentersNatgatewaysFlowlogsPutRequest {
        private final String datacenterId;
        private final String natGatewayId;
        private final String flowLogId;
        private final FlowLogPut natGatewayFlowLog;
        private Boolean pretty;
        private Integer depth;

        private APIdatacentersNatgatewaysFlowlogsPutRequest(String datacenterId, String natGatewayId, String flowLogId, FlowLogPut natGatewayFlowLog) {
            this.datacenterId = datacenterId;
            this.natGatewayId = natGatewayId;
            this.flowLogId = flowLogId;
            this.natGatewayFlowLog = natGatewayFlowLog;
        }

        /**
         * Set pretty
         * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
         * @return APIdatacentersNatgatewaysFlowlogsPutRequest
         */
        public APIdatacentersNatgatewaysFlowlogsPutRequest pretty(Boolean pretty) {
            this.pretty = pretty;
            return this;
        }

        /**
         * Set depth
         * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
         * @return APIdatacentersNatgatewaysFlowlogsPutRequest
         */
        public APIdatacentersNatgatewaysFlowlogsPutRequest depth(Integer depth) {
            this.depth = depth;
            return this;
        }


        /**
         * Build call for datacentersNatgatewaysFlowlogsPut
         * @param callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback callback) throws ApiException {
            return datacentersNatgatewaysFlowlogsPutCall(datacenterId, natGatewayId, flowLogId, natGatewayFlowLog, pretty, depth, callback);
        }

        /**
         * Execute datacentersNatgatewaysFlowlogsPut request
         * @return FlowLog
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public FlowLog execute() throws ApiException {
        ApiResponse<FlowLog> localVarResp = datacentersNatgatewaysFlowlogsPutWithHttpInfo(datacenterId, natGatewayId, flowLogId, natGatewayFlowLog, pretty, depth);
            return localVarResp.getData();
        }

        /**
         * Execute datacentersNatgatewaysFlowlogsPut request with HTTP info returned
         * @return ApiResponse&lt;FlowLog&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FlowLog> executeWithHttpInfo() throws ApiException {
            return datacentersNatgatewaysFlowlogsPutWithHttpInfo(datacenterId, natGatewayId, flowLogId, natGatewayFlowLog, pretty, depth);
        }

        /**
         * Execute datacentersNatgatewaysFlowlogsPut request (asynchronously)
         * @param callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FlowLog> callback) throws ApiException {
            return datacentersNatgatewaysFlowlogsPutAsync(datacenterId, natGatewayId, flowLogId, natGatewayFlowLog, pretty, depth, callback);
        }
    }

    /**
     * Modify NAT Gateway Flow Logs
     * Modify the specified NAT Gateway Flow Log.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param natGatewayFlowLog The modified NAT Gateway Flow Log. (required)
     * @return APIdatacentersNatgatewaysFlowlogsPutRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public APIdatacentersNatgatewaysFlowlogsPutRequest datacentersNatgatewaysFlowlogsPut(String datacenterId, String natGatewayId, String flowLogId, FlowLogPut natGatewayFlowLog) {
        return new APIdatacentersNatgatewaysFlowlogsPutRequest(datacenterId, natGatewayId, flowLogId, natGatewayFlowLog);
    }
    /**
     * Build call for datacentersNatgatewaysGet
     * @param datacenterId The unique ID of the data center. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysGetCall(String datacenterId, Boolean pretty, Integer depth, Integer xContractNumber,  String orderBy, Integer maxResults, Map<String, String> filters,final ApiCallback callback ) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/natgateways"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }
        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }
        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }
        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }
        if (filters != null) {
            filters.forEach((key, value) -> {
                localVarQueryParams.add(new Pair(String.format("filter.%s", key), value));
            });
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNatgatewaysGetValidateBeforeCall(String datacenterId, Boolean pretty, Integer depth, Integer xContractNumber,  String orderBy, Integer maxResults , Map<String, String> filters,final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNatgatewaysGet(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNatgatewaysGetCall(datacenterId, pretty, depth, xContractNumber,  orderBy, maxResults, filters,callback);
        return localVarCall;

    }

    /**
     * List NAT Gateways
     * List all NAT Gateways within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @param orderBy - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param maxResults - Limits the number of results returned.
     * @param filters - Filters query parameters limit results to those containing a matching value for a specific property.
     * @return NatGateways
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public NatGateways datacentersNatgatewaysGet(String datacenterId, Boolean pretty, Integer depth, Integer xContractNumber,  String orderBy, Integer maxResults, Map<String, String> filters) throws ApiException {
        ApiResponse<NatGateways> localVarResp = datacentersNatgatewaysGetWithHttpInfo(datacenterId, pretty, depth, xContractNumber, orderBy, maxResults, filters);
        return localVarResp.getData();
    }

    /**
     * List NAT Gateways
     * List all NAT Gateways within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @param orderBy - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param maxResults - Limits the number of results returned.
     * @param filters - Filters query parameters limit results to those containing a matching value for a specific property.
     * @return ApiResponse&lt;NatGateways&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NatGateways> datacentersNatgatewaysGetWithHttpInfo(String datacenterId, Boolean pretty, Integer depth, Integer xContractNumber, String orderBy, Integer maxResults, Map<String, String> filters) throws ApiException {
        okhttp3.Call localVarCall = datacentersNatgatewaysGetValidateBeforeCall(datacenterId, pretty, depth, xContractNumber,  orderBy, maxResults, filters, null);
        Type localVarReturnType = new TypeToken<NatGateways>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List NAT Gateways (asynchronously)
     * List all NAT Gateways within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysGetAsync(String datacenterId, Boolean pretty, Integer depth, Integer xContractNumber, String orderBy, Integer maxResults, Map<String, String> filters,final ApiCallback<NatGateways> callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNatgatewaysGetValidateBeforeCall(datacenterId, pretty, depth, xContractNumber,  orderBy, maxResults, filters, callback);
        Type localVarReturnType = new TypeToken<NatGateways>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return localVarCall;
    }

    public class APIdatacentersNatgatewaysGetRequest {
        private final String datacenterId;
        private Boolean pretty;
        private Integer depth;
        private Integer xContractNumber;
        private String orderBy;
        private Integer maxResults;
        private Map<String, String> filters;

        private APIdatacentersNatgatewaysGetRequest(String datacenterId) {
            this.datacenterId = datacenterId;
        }

        /**
         * Set pretty
         * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
         * @return APIdatacentersNatgatewaysGetRequest
         */
        public APIdatacentersNatgatewaysGetRequest pretty(Boolean pretty) {
            this.pretty = pretty;
            return this;
        }

        /**
         * Set depth
         * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
         * @return APIdatacentersNatgatewaysGetRequest
         */
        public APIdatacentersNatgatewaysGetRequest depth(Integer depth) {
            this.depth = depth;
            return this;
        }

        /**
         * Set xContractNumber
         * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
         * @return APIdatacentersNatgatewaysGetRequest
         */
        public APIdatacentersNatgatewaysGetRequest xContractNumber(Integer xContractNumber) {
            this.xContractNumber = xContractNumber;
            return this;
        }


        /**
        * Set orderBy
        * @param orderBy Orders the response based on a property.
        * @return APIdatacentersNatgatewaysGetRequest
        */
        public APIdatacentersNatgatewaysGetRequest orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }

        /**
        * Set maxResults
        * @param maxResults Limits the number of items in a response.
        * @return APIdatacentersNatgatewaysGetRequest
        */
        public APIdatacentersNatgatewaysGetRequest maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }

        /**
        * Set filters
        * @param filters Filters the response based on a property.
        * @return APIdatacentersNatgatewaysGetRequest
        */
        public APIdatacentersNatgatewaysGetRequest filters(Map<String, String> filters) {
            this.filters = filters;
            return this;
        }


        /**
         * Build call for datacentersNatgatewaysGet
         * @param callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback callback) throws ApiException {
            return datacentersNatgatewaysGetCall(datacenterId, pretty, depth, xContractNumber, orderBy, maxResults, filters, callback);
        }

        /**
         * Execute datacentersNatgatewaysGet request
         * @return NatGateways
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public NatGateways execute() throws ApiException {
        ApiResponse<NatGateways> localVarResp = datacentersNatgatewaysGetWithHttpInfo(datacenterId, pretty, depth, xContractNumber, orderBy, maxResults, filters);
            return localVarResp.getData();
        }

        /**
         * Execute datacentersNatgatewaysGet request with HTTP info returned
         * @return ApiResponse&lt;NatGateways&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NatGateways> executeWithHttpInfo() throws ApiException {
            return datacentersNatgatewaysGetWithHttpInfo(datacenterId, pretty, depth, xContractNumber, orderBy, maxResults, filters);
        }

        /**
         * Execute datacentersNatgatewaysGet request (asynchronously)
         * @param callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NatGateways> callback) throws ApiException {
            return datacentersNatgatewaysGetAsync(datacenterId, pretty, depth, xContractNumber, orderBy, maxResults, filters, callback);
        }
    }

    /**
     * List NAT Gateways
     * List all NAT Gateways within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @return APIdatacentersNatgatewaysGetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public APIdatacentersNatgatewaysGetRequest datacentersNatgatewaysGet(String datacenterId) {
        return new APIdatacentersNatgatewaysGetRequest(datacenterId);
    }
    /**
     * Build call for datacentersNatgatewaysPatch
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayProperties The properties of the NAT Gateway to be updated. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysPatchCall(String datacenterId, String natGatewayId, NatGatewayProperties natGatewayProperties, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback ) throws ApiException {
        Object localVarPostBody = natGatewayProperties;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "natGatewayId" + "\\}", localVarApiClient.escapeString(natGatewayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }
        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNatgatewaysPatchValidateBeforeCall(String datacenterId, String natGatewayId, NatGatewayProperties natGatewayProperties, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNatgatewaysPatch(Async)");
        }
        
        // verify the required parameter 'natGatewayId' is set
        if (natGatewayId == null) {
            throw new ApiException("Missing the required parameter 'natGatewayId' when calling datacentersNatgatewaysPatch(Async)");
        }
        
        // verify the required parameter 'natGatewayProperties' is set
        if (natGatewayProperties == null) {
            throw new ApiException("Missing the required parameter 'natGatewayProperties' when calling datacentersNatgatewaysPatch(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNatgatewaysPatchCall(datacenterId, natGatewayId, natGatewayProperties, pretty, depth, xContractNumber, callback);
        return localVarCall;

    }

    /**
     * Partially modify NAT Gateways
     * Update the properties of the specified NAT Gateway within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayProperties The properties of the NAT Gateway to be updated. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * 
     * @return NatGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public NatGateway datacentersNatgatewaysPatch(String datacenterId, String natGatewayId, NatGatewayProperties natGatewayProperties, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<NatGateway> localVarResp = datacentersNatgatewaysPatchWithHttpInfo(datacenterId, natGatewayId, natGatewayProperties, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * Partially modify NAT Gateways
     * Update the properties of the specified NAT Gateway within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayProperties The properties of the NAT Gateway to be updated. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * 
     * @return ApiResponse&lt;NatGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NatGateway> datacentersNatgatewaysPatchWithHttpInfo(String datacenterId, String natGatewayId, NatGatewayProperties natGatewayProperties, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersNatgatewaysPatchValidateBeforeCall(datacenterId, natGatewayId, natGatewayProperties, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<NatGateway>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Partially modify NAT Gateways (asynchronously)
     * Update the properties of the specified NAT Gateway within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayProperties The properties of the NAT Gateway to be updated. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysPatchAsync(String datacenterId, String natGatewayId, NatGatewayProperties natGatewayProperties, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NatGateway> callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNatgatewaysPatchValidateBeforeCall(datacenterId, natGatewayId, natGatewayProperties, pretty, depth, xContractNumber, callback);
        Type localVarReturnType = new TypeToken<NatGateway>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return localVarCall;
    }

    public class APIdatacentersNatgatewaysPatchRequest {
        private final String datacenterId;
        private final String natGatewayId;
        private final NatGatewayProperties natGatewayProperties;
        private Boolean pretty;
        private Integer depth;
        private Integer xContractNumber;

        private APIdatacentersNatgatewaysPatchRequest(String datacenterId, String natGatewayId, NatGatewayProperties natGatewayProperties) {
            this.datacenterId = datacenterId;
            this.natGatewayId = natGatewayId;
            this.natGatewayProperties = natGatewayProperties;
        }

        /**
         * Set pretty
         * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
         * @return APIdatacentersNatgatewaysPatchRequest
         */
        public APIdatacentersNatgatewaysPatchRequest pretty(Boolean pretty) {
            this.pretty = pretty;
            return this;
        }

        /**
         * Set depth
         * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
         * @return APIdatacentersNatgatewaysPatchRequest
         */
        public APIdatacentersNatgatewaysPatchRequest depth(Integer depth) {
            this.depth = depth;
            return this;
        }

        /**
         * Set xContractNumber
         * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
         * @return APIdatacentersNatgatewaysPatchRequest
         */
        public APIdatacentersNatgatewaysPatchRequest xContractNumber(Integer xContractNumber) {
            this.xContractNumber = xContractNumber;
            return this;
        }


        /**
         * Build call for datacentersNatgatewaysPatch
         * @param callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback callback) throws ApiException {
            return datacentersNatgatewaysPatchCall(datacenterId, natGatewayId, natGatewayProperties, pretty, depth, xContractNumber, callback);
        }

        /**
         * Execute datacentersNatgatewaysPatch request
         * @return NatGateway
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public NatGateway execute() throws ApiException {
        ApiResponse<NatGateway> localVarResp = datacentersNatgatewaysPatchWithHttpInfo(datacenterId, natGatewayId, natGatewayProperties, pretty, depth, xContractNumber);
            return localVarResp.getData();
        }

        /**
         * Execute datacentersNatgatewaysPatch request with HTTP info returned
         * @return ApiResponse&lt;NatGateway&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NatGateway> executeWithHttpInfo() throws ApiException {
            return datacentersNatgatewaysPatchWithHttpInfo(datacenterId, natGatewayId, natGatewayProperties, pretty, depth, xContractNumber);
        }

        /**
         * Execute datacentersNatgatewaysPatch request (asynchronously)
         * @param callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NatGateway> callback) throws ApiException {
            return datacentersNatgatewaysPatchAsync(datacenterId, natGatewayId, natGatewayProperties, pretty, depth, xContractNumber, callback);
        }
    }

    /**
     * Partially modify NAT Gateways
     * Update the properties of the specified NAT Gateway within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayProperties The properties of the NAT Gateway to be updated. (required)
     * @return APIdatacentersNatgatewaysPatchRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public APIdatacentersNatgatewaysPatchRequest datacentersNatgatewaysPatch(String datacenterId, String natGatewayId, NatGatewayProperties natGatewayProperties) {
        return new APIdatacentersNatgatewaysPatchRequest(datacenterId, natGatewayId, natGatewayProperties);
    }
    /**
     * Build call for datacentersNatgatewaysPost
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGateway The NAT Gateway to create. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysPostCall(String datacenterId, NatGateway natGateway, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback ) throws ApiException {
        Object localVarPostBody = natGateway;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/natgateways"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }
        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNatgatewaysPostValidateBeforeCall(String datacenterId, NatGateway natGateway, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNatgatewaysPost(Async)");
        }
        
        // verify the required parameter 'natGateway' is set
        if (natGateway == null) {
            throw new ApiException("Missing the required parameter 'natGateway' when calling datacentersNatgatewaysPost(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNatgatewaysPostCall(datacenterId, natGateway, pretty, depth, xContractNumber, callback);
        return localVarCall;

    }

    /**
     * Create a NAT Gateway
     * Creates a NAT Gateway within the data center.  This operation is restricted to contract owner, admin, and users with &#39;createInternetAccess&#39; privileges.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGateway The NAT Gateway to create. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * 
     * @return NatGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public NatGateway datacentersNatgatewaysPost(String datacenterId, NatGateway natGateway, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<NatGateway> localVarResp = datacentersNatgatewaysPostWithHttpInfo(datacenterId, natGateway, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * Create a NAT Gateway
     * Creates a NAT Gateway within the data center.  This operation is restricted to contract owner, admin, and users with &#39;createInternetAccess&#39; privileges.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGateway The NAT Gateway to create. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * 
     * @return ApiResponse&lt;NatGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NatGateway> datacentersNatgatewaysPostWithHttpInfo(String datacenterId, NatGateway natGateway, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersNatgatewaysPostValidateBeforeCall(datacenterId, natGateway, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<NatGateway>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a NAT Gateway (asynchronously)
     * Creates a NAT Gateway within the data center.  This operation is restricted to contract owner, admin, and users with &#39;createInternetAccess&#39; privileges.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGateway The NAT Gateway to create. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysPostAsync(String datacenterId, NatGateway natGateway, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NatGateway> callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNatgatewaysPostValidateBeforeCall(datacenterId, natGateway, pretty, depth, xContractNumber, callback);
        Type localVarReturnType = new TypeToken<NatGateway>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return localVarCall;
    }

    public class APIdatacentersNatgatewaysPostRequest {
        private final String datacenterId;
        private final NatGateway natGateway;
        private Boolean pretty;
        private Integer depth;
        private Integer xContractNumber;

        private APIdatacentersNatgatewaysPostRequest(String datacenterId, NatGateway natGateway) {
            this.datacenterId = datacenterId;
            this.natGateway = natGateway;
        }

        /**
         * Set pretty
         * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
         * @return APIdatacentersNatgatewaysPostRequest
         */
        public APIdatacentersNatgatewaysPostRequest pretty(Boolean pretty) {
            this.pretty = pretty;
            return this;
        }

        /**
         * Set depth
         * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
         * @return APIdatacentersNatgatewaysPostRequest
         */
        public APIdatacentersNatgatewaysPostRequest depth(Integer depth) {
            this.depth = depth;
            return this;
        }

        /**
         * Set xContractNumber
         * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
         * @return APIdatacentersNatgatewaysPostRequest
         */
        public APIdatacentersNatgatewaysPostRequest xContractNumber(Integer xContractNumber) {
            this.xContractNumber = xContractNumber;
            return this;
        }


        /**
         * Build call for datacentersNatgatewaysPost
         * @param callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback callback) throws ApiException {
            return datacentersNatgatewaysPostCall(datacenterId, natGateway, pretty, depth, xContractNumber, callback);
        }

        /**
         * Execute datacentersNatgatewaysPost request
         * @return NatGateway
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public NatGateway execute() throws ApiException {
        ApiResponse<NatGateway> localVarResp = datacentersNatgatewaysPostWithHttpInfo(datacenterId, natGateway, pretty, depth, xContractNumber);
            return localVarResp.getData();
        }

        /**
         * Execute datacentersNatgatewaysPost request with HTTP info returned
         * @return ApiResponse&lt;NatGateway&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NatGateway> executeWithHttpInfo() throws ApiException {
            return datacentersNatgatewaysPostWithHttpInfo(datacenterId, natGateway, pretty, depth, xContractNumber);
        }

        /**
         * Execute datacentersNatgatewaysPost request (asynchronously)
         * @param callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NatGateway> callback) throws ApiException {
            return datacentersNatgatewaysPostAsync(datacenterId, natGateway, pretty, depth, xContractNumber, callback);
        }
    }

    /**
     * Create a NAT Gateway
     * Creates a NAT Gateway within the data center.  This operation is restricted to contract owner, admin, and users with &#39;createInternetAccess&#39; privileges.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGateway The NAT Gateway to create. (required)
     * @return APIdatacentersNatgatewaysPostRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public APIdatacentersNatgatewaysPostRequest datacentersNatgatewaysPost(String datacenterId, NatGateway natGateway) {
        return new APIdatacentersNatgatewaysPostRequest(datacenterId, natGateway);
    }
    /**
     * Build call for datacentersNatgatewaysPut
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGateway The modified NAT Gateway. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysPutCall(String datacenterId, String natGatewayId, NatGatewayPut natGateway, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback ) throws ApiException {
        Object localVarPostBody = natGateway;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "natGatewayId" + "\\}", localVarApiClient.escapeString(natGatewayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }
        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNatgatewaysPutValidateBeforeCall(String datacenterId, String natGatewayId, NatGatewayPut natGateway, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNatgatewaysPut(Async)");
        }
        
        // verify the required parameter 'natGatewayId' is set
        if (natGatewayId == null) {
            throw new ApiException("Missing the required parameter 'natGatewayId' when calling datacentersNatgatewaysPut(Async)");
        }
        
        // verify the required parameter 'natGateway' is set
        if (natGateway == null) {
            throw new ApiException("Missing the required parameter 'natGateway' when calling datacentersNatgatewaysPut(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNatgatewaysPutCall(datacenterId, natGatewayId, natGateway, pretty, depth, xContractNumber, callback);
        return localVarCall;

    }

    /**
     * Modify NAT Gateways
     * Modify the properties of the specified NAT Gateway within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGateway The modified NAT Gateway. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * 
     * @return NatGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public NatGateway datacentersNatgatewaysPut(String datacenterId, String natGatewayId, NatGatewayPut natGateway, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<NatGateway> localVarResp = datacentersNatgatewaysPutWithHttpInfo(datacenterId, natGatewayId, natGateway, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * Modify NAT Gateways
     * Modify the properties of the specified NAT Gateway within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGateway The modified NAT Gateway. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * 
     * @return ApiResponse&lt;NatGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NatGateway> datacentersNatgatewaysPutWithHttpInfo(String datacenterId, String natGatewayId, NatGatewayPut natGateway, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersNatgatewaysPutValidateBeforeCall(datacenterId, natGatewayId, natGateway, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<NatGateway>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify NAT Gateways (asynchronously)
     * Modify the properties of the specified NAT Gateway within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGateway The modified NAT Gateway. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysPutAsync(String datacenterId, String natGatewayId, NatGatewayPut natGateway, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NatGateway> callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNatgatewaysPutValidateBeforeCall(datacenterId, natGatewayId, natGateway, pretty, depth, xContractNumber, callback);
        Type localVarReturnType = new TypeToken<NatGateway>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return localVarCall;
    }

    public class APIdatacentersNatgatewaysPutRequest {
        private final String datacenterId;
        private final String natGatewayId;
        private final NatGatewayPut natGateway;
        private Boolean pretty;
        private Integer depth;
        private Integer xContractNumber;

        private APIdatacentersNatgatewaysPutRequest(String datacenterId, String natGatewayId, NatGatewayPut natGateway) {
            this.datacenterId = datacenterId;
            this.natGatewayId = natGatewayId;
            this.natGateway = natGateway;
        }

        /**
         * Set pretty
         * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
         * @return APIdatacentersNatgatewaysPutRequest
         */
        public APIdatacentersNatgatewaysPutRequest pretty(Boolean pretty) {
            this.pretty = pretty;
            return this;
        }

        /**
         * Set depth
         * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
         * @return APIdatacentersNatgatewaysPutRequest
         */
        public APIdatacentersNatgatewaysPutRequest depth(Integer depth) {
            this.depth = depth;
            return this;
        }

        /**
         * Set xContractNumber
         * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
         * @return APIdatacentersNatgatewaysPutRequest
         */
        public APIdatacentersNatgatewaysPutRequest xContractNumber(Integer xContractNumber) {
            this.xContractNumber = xContractNumber;
            return this;
        }


        /**
         * Build call for datacentersNatgatewaysPut
         * @param callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback callback) throws ApiException {
            return datacentersNatgatewaysPutCall(datacenterId, natGatewayId, natGateway, pretty, depth, xContractNumber, callback);
        }

        /**
         * Execute datacentersNatgatewaysPut request
         * @return NatGateway
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public NatGateway execute() throws ApiException {
        ApiResponse<NatGateway> localVarResp = datacentersNatgatewaysPutWithHttpInfo(datacenterId, natGatewayId, natGateway, pretty, depth, xContractNumber);
            return localVarResp.getData();
        }

        /**
         * Execute datacentersNatgatewaysPut request with HTTP info returned
         * @return ApiResponse&lt;NatGateway&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NatGateway> executeWithHttpInfo() throws ApiException {
            return datacentersNatgatewaysPutWithHttpInfo(datacenterId, natGatewayId, natGateway, pretty, depth, xContractNumber);
        }

        /**
         * Execute datacentersNatgatewaysPut request (asynchronously)
         * @param callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NatGateway> callback) throws ApiException {
            return datacentersNatgatewaysPutAsync(datacenterId, natGatewayId, natGateway, pretty, depth, xContractNumber, callback);
        }
    }

    /**
     * Modify NAT Gateways
     * Modify the properties of the specified NAT Gateway within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGateway The modified NAT Gateway. (required)
     * @return APIdatacentersNatgatewaysPutRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public APIdatacentersNatgatewaysPutRequest datacentersNatgatewaysPut(String datacenterId, String natGatewayId, NatGatewayPut natGateway) {
        return new APIdatacentersNatgatewaysPutRequest(datacenterId, natGatewayId, natGateway);
    }
    /**
     * Build call for datacentersNatgatewaysRulesDelete
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayRuleId The unique ID of the NAT Gateway rule. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysRulesDeleteCall(String datacenterId, String natGatewayId, String natGatewayRuleId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback ) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}/rules/{natGatewayRuleId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "natGatewayId" + "\\}", localVarApiClient.escapeString(natGatewayId.toString()))
            .replaceAll("\\{" + "natGatewayRuleId" + "\\}", localVarApiClient.escapeString(natGatewayRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }
        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNatgatewaysRulesDeleteValidateBeforeCall(String datacenterId, String natGatewayId, String natGatewayRuleId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNatgatewaysRulesDelete(Async)");
        }
        
        // verify the required parameter 'natGatewayId' is set
        if (natGatewayId == null) {
            throw new ApiException("Missing the required parameter 'natGatewayId' when calling datacentersNatgatewaysRulesDelete(Async)");
        }
        
        // verify the required parameter 'natGatewayRuleId' is set
        if (natGatewayRuleId == null) {
            throw new ApiException("Missing the required parameter 'natGatewayRuleId' when calling datacentersNatgatewaysRulesDelete(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNatgatewaysRulesDeleteCall(datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber, callback);
        return localVarCall;

    }

    /**
     * Delete NAT Gateway rules
     * Delete the specified NAT Gateway rule.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayRuleId The unique ID of the NAT Gateway rule. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public void datacentersNatgatewaysRulesDelete(String datacenterId, String natGatewayId, String natGatewayRuleId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        datacentersNatgatewaysRulesDeleteWithHttpInfo(datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber);
    }

    /**
     * Delete NAT Gateway rules
     * Delete the specified NAT Gateway rule.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayRuleId The unique ID of the NAT Gateway rule. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> datacentersNatgatewaysRulesDeleteWithHttpInfo(String datacenterId, String natGatewayId, String natGatewayRuleId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersNatgatewaysRulesDeleteValidateBeforeCall(datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete NAT Gateway rules (asynchronously)
     * Delete the specified NAT Gateway rule.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayRuleId The unique ID of the NAT Gateway rule. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysRulesDeleteAsync(String datacenterId, String natGatewayId, String natGatewayRuleId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<Void> callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNatgatewaysRulesDeleteValidateBeforeCall(datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber, callback);
        localVarApiClient.executeAsync(localVarCall, callback);
        return localVarCall;
    }

    public class APIdatacentersNatgatewaysRulesDeleteRequest {
        private final String datacenterId;
        private final String natGatewayId;
        private final String natGatewayRuleId;
        private Boolean pretty;
        private Integer depth;
        private Integer xContractNumber;

        private APIdatacentersNatgatewaysRulesDeleteRequest(String datacenterId, String natGatewayId, String natGatewayRuleId) {
            this.datacenterId = datacenterId;
            this.natGatewayId = natGatewayId;
            this.natGatewayRuleId = natGatewayRuleId;
        }

        /**
         * Set pretty
         * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
         * @return APIdatacentersNatgatewaysRulesDeleteRequest
         */
        public APIdatacentersNatgatewaysRulesDeleteRequest pretty(Boolean pretty) {
            this.pretty = pretty;
            return this;
        }

        /**
         * Set depth
         * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
         * @return APIdatacentersNatgatewaysRulesDeleteRequest
         */
        public APIdatacentersNatgatewaysRulesDeleteRequest depth(Integer depth) {
            this.depth = depth;
            return this;
        }

        /**
         * Set xContractNumber
         * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
         * @return APIdatacentersNatgatewaysRulesDeleteRequest
         */
        public APIdatacentersNatgatewaysRulesDeleteRequest xContractNumber(Integer xContractNumber) {
            this.xContractNumber = xContractNumber;
            return this;
        }


        /**
         * Build call for datacentersNatgatewaysRulesDelete
         * @param callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback callback) throws ApiException {
            return datacentersNatgatewaysRulesDeleteCall(datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber, callback);
        }

        /**
         * Execute datacentersNatgatewaysRulesDelete request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
        datacentersNatgatewaysRulesDeleteWithHttpInfo(datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber);
        }

        /**
         * Execute datacentersNatgatewaysRulesDelete request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return datacentersNatgatewaysRulesDeleteWithHttpInfo(datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber);
        }

        /**
         * Execute datacentersNatgatewaysRulesDelete request (asynchronously)
         * @param callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> callback) throws ApiException {
            return datacentersNatgatewaysRulesDeleteAsync(datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber, callback);
        }
    }

    /**
     * Delete NAT Gateway rules
     * Delete the specified NAT Gateway rule.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayRuleId The unique ID of the NAT Gateway rule. (required)
     * @return APIdatacentersNatgatewaysRulesDeleteRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public APIdatacentersNatgatewaysRulesDeleteRequest datacentersNatgatewaysRulesDelete(String datacenterId, String natGatewayId, String natGatewayRuleId) {
        return new APIdatacentersNatgatewaysRulesDeleteRequest(datacenterId, natGatewayId, natGatewayRuleId);
    }
    /**
     * Build call for datacentersNatgatewaysRulesFindByNatGatewayRuleId
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayRuleId The unique ID of the NAT Gateway rule. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysRulesFindByNatGatewayRuleIdCall(String datacenterId, String natGatewayId, String natGatewayRuleId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback ) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}/rules/{natGatewayRuleId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "natGatewayId" + "\\}", localVarApiClient.escapeString(natGatewayId.toString()))
            .replaceAll("\\{" + "natGatewayRuleId" + "\\}", localVarApiClient.escapeString(natGatewayRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }
        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNatgatewaysRulesFindByNatGatewayRuleIdValidateBeforeCall(String datacenterId, String natGatewayId, String natGatewayRuleId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNatgatewaysRulesFindByNatGatewayRuleId(Async)");
        }
        
        // verify the required parameter 'natGatewayId' is set
        if (natGatewayId == null) {
            throw new ApiException("Missing the required parameter 'natGatewayId' when calling datacentersNatgatewaysRulesFindByNatGatewayRuleId(Async)");
        }
        
        // verify the required parameter 'natGatewayRuleId' is set
        if (natGatewayRuleId == null) {
            throw new ApiException("Missing the required parameter 'natGatewayRuleId' when calling datacentersNatgatewaysRulesFindByNatGatewayRuleId(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNatgatewaysRulesFindByNatGatewayRuleIdCall(datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber, callback);
        return localVarCall;

    }

    /**
     * Retrieve NAT Gateway rules
     * Retrieve the properties of the specified NAT Gateway rule.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayRuleId The unique ID of the NAT Gateway rule. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * 
     * @return NatGatewayRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public NatGatewayRule datacentersNatgatewaysRulesFindByNatGatewayRuleId(String datacenterId, String natGatewayId, String natGatewayRuleId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<NatGatewayRule> localVarResp = datacentersNatgatewaysRulesFindByNatGatewayRuleIdWithHttpInfo(datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * Retrieve NAT Gateway rules
     * Retrieve the properties of the specified NAT Gateway rule.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayRuleId The unique ID of the NAT Gateway rule. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * 
     * @return ApiResponse&lt;NatGatewayRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NatGatewayRule> datacentersNatgatewaysRulesFindByNatGatewayRuleIdWithHttpInfo(String datacenterId, String natGatewayId, String natGatewayRuleId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersNatgatewaysRulesFindByNatGatewayRuleIdValidateBeforeCall(datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<NatGatewayRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve NAT Gateway rules (asynchronously)
     * Retrieve the properties of the specified NAT Gateway rule.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayRuleId The unique ID of the NAT Gateway rule. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysRulesFindByNatGatewayRuleIdAsync(String datacenterId, String natGatewayId, String natGatewayRuleId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NatGatewayRule> callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNatgatewaysRulesFindByNatGatewayRuleIdValidateBeforeCall(datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber, callback);
        Type localVarReturnType = new TypeToken<NatGatewayRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return localVarCall;
    }

    public class APIdatacentersNatgatewaysRulesFindByNatGatewayRuleIdRequest {
        private final String datacenterId;
        private final String natGatewayId;
        private final String natGatewayRuleId;
        private Boolean pretty;
        private Integer depth;
        private Integer xContractNumber;

        private APIdatacentersNatgatewaysRulesFindByNatGatewayRuleIdRequest(String datacenterId, String natGatewayId, String natGatewayRuleId) {
            this.datacenterId = datacenterId;
            this.natGatewayId = natGatewayId;
            this.natGatewayRuleId = natGatewayRuleId;
        }

        /**
         * Set pretty
         * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
         * @return APIdatacentersNatgatewaysRulesFindByNatGatewayRuleIdRequest
         */
        public APIdatacentersNatgatewaysRulesFindByNatGatewayRuleIdRequest pretty(Boolean pretty) {
            this.pretty = pretty;
            return this;
        }

        /**
         * Set depth
         * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
         * @return APIdatacentersNatgatewaysRulesFindByNatGatewayRuleIdRequest
         */
        public APIdatacentersNatgatewaysRulesFindByNatGatewayRuleIdRequest depth(Integer depth) {
            this.depth = depth;
            return this;
        }

        /**
         * Set xContractNumber
         * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
         * @return APIdatacentersNatgatewaysRulesFindByNatGatewayRuleIdRequest
         */
        public APIdatacentersNatgatewaysRulesFindByNatGatewayRuleIdRequest xContractNumber(Integer xContractNumber) {
            this.xContractNumber = xContractNumber;
            return this;
        }


        /**
         * Build call for datacentersNatgatewaysRulesFindByNatGatewayRuleId
         * @param callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback callback) throws ApiException {
            return datacentersNatgatewaysRulesFindByNatGatewayRuleIdCall(datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber, callback);
        }

        /**
         * Execute datacentersNatgatewaysRulesFindByNatGatewayRuleId request
         * @return NatGatewayRule
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public NatGatewayRule execute() throws ApiException {
        ApiResponse<NatGatewayRule> localVarResp = datacentersNatgatewaysRulesFindByNatGatewayRuleIdWithHttpInfo(datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber);
            return localVarResp.getData();
        }

        /**
         * Execute datacentersNatgatewaysRulesFindByNatGatewayRuleId request with HTTP info returned
         * @return ApiResponse&lt;NatGatewayRule&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NatGatewayRule> executeWithHttpInfo() throws ApiException {
            return datacentersNatgatewaysRulesFindByNatGatewayRuleIdWithHttpInfo(datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber);
        }

        /**
         * Execute datacentersNatgatewaysRulesFindByNatGatewayRuleId request (asynchronously)
         * @param callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NatGatewayRule> callback) throws ApiException {
            return datacentersNatgatewaysRulesFindByNatGatewayRuleIdAsync(datacenterId, natGatewayId, natGatewayRuleId, pretty, depth, xContractNumber, callback);
        }
    }

    /**
     * Retrieve NAT Gateway rules
     * Retrieve the properties of the specified NAT Gateway rule.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayRuleId The unique ID of the NAT Gateway rule. (required)
     * @return APIdatacentersNatgatewaysRulesFindByNatGatewayRuleIdRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public APIdatacentersNatgatewaysRulesFindByNatGatewayRuleIdRequest datacentersNatgatewaysRulesFindByNatGatewayRuleId(String datacenterId, String natGatewayId, String natGatewayRuleId) {
        return new APIdatacentersNatgatewaysRulesFindByNatGatewayRuleIdRequest(datacenterId, natGatewayId, natGatewayRuleId);
    }
    /**
     * Build call for datacentersNatgatewaysRulesGet
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysRulesGetCall(String datacenterId, String natGatewayId, Boolean pretty, Integer depth, Integer xContractNumber,  String orderBy, Integer maxResults, Map<String, String> filters,final ApiCallback callback ) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}/rules"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "natGatewayId" + "\\}", localVarApiClient.escapeString(natGatewayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }
        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }
        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }
        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }
        if (filters != null) {
            filters.forEach((key, value) -> {
                localVarQueryParams.add(new Pair(String.format("filter.%s", key), value));
            });
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNatgatewaysRulesGetValidateBeforeCall(String datacenterId, String natGatewayId, Boolean pretty, Integer depth, Integer xContractNumber,  String orderBy, Integer maxResults , Map<String, String> filters,final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNatgatewaysRulesGet(Async)");
        }
        
        // verify the required parameter 'natGatewayId' is set
        if (natGatewayId == null) {
            throw new ApiException("Missing the required parameter 'natGatewayId' when calling datacentersNatgatewaysRulesGet(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNatgatewaysRulesGetCall(datacenterId, natGatewayId, pretty, depth, xContractNumber,  orderBy, maxResults, filters,callback);
        return localVarCall;

    }

    /**
     * List NAT Gateway rules
     * List all rules for the specified NAT Gateway.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @param orderBy - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param maxResults - Limits the number of results returned.
     * @param filters - Filters query parameters limit results to those containing a matching value for a specific property.
     * @return NatGatewayRules
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public NatGatewayRules datacentersNatgatewaysRulesGet(String datacenterId, String natGatewayId, Boolean pretty, Integer depth, Integer xContractNumber,  String orderBy, Integer maxResults, Map<String, String> filters) throws ApiException {
        ApiResponse<NatGatewayRules> localVarResp = datacentersNatgatewaysRulesGetWithHttpInfo(datacenterId, natGatewayId, pretty, depth, xContractNumber, orderBy, maxResults, filters);
        return localVarResp.getData();
    }

    /**
     * List NAT Gateway rules
     * List all rules for the specified NAT Gateway.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @param orderBy - Sorts the results alphanumerically in ascending order based on the specified property.
     * @param maxResults - Limits the number of results returned.
     * @param filters - Filters query parameters limit results to those containing a matching value for a specific property.
     * @return ApiResponse&lt;NatGatewayRules&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NatGatewayRules> datacentersNatgatewaysRulesGetWithHttpInfo(String datacenterId, String natGatewayId, Boolean pretty, Integer depth, Integer xContractNumber, String orderBy, Integer maxResults, Map<String, String> filters) throws ApiException {
        okhttp3.Call localVarCall = datacentersNatgatewaysRulesGetValidateBeforeCall(datacenterId, natGatewayId, pretty, depth, xContractNumber,  orderBy, maxResults, filters, null);
        Type localVarReturnType = new TypeToken<NatGatewayRules>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List NAT Gateway rules (asynchronously)
     * List all rules for the specified NAT Gateway.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysRulesGetAsync(String datacenterId, String natGatewayId, Boolean pretty, Integer depth, Integer xContractNumber, String orderBy, Integer maxResults, Map<String, String> filters,final ApiCallback<NatGatewayRules> callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNatgatewaysRulesGetValidateBeforeCall(datacenterId, natGatewayId, pretty, depth, xContractNumber,  orderBy, maxResults, filters, callback);
        Type localVarReturnType = new TypeToken<NatGatewayRules>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return localVarCall;
    }

    public class APIdatacentersNatgatewaysRulesGetRequest {
        private final String datacenterId;
        private final String natGatewayId;
        private Boolean pretty;
        private Integer depth;
        private Integer xContractNumber;
        private String orderBy;
        private Integer maxResults;
        private Map<String, String> filters;

        private APIdatacentersNatgatewaysRulesGetRequest(String datacenterId, String natGatewayId) {
            this.datacenterId = datacenterId;
            this.natGatewayId = natGatewayId;
        }

        /**
         * Set pretty
         * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
         * @return APIdatacentersNatgatewaysRulesGetRequest
         */
        public APIdatacentersNatgatewaysRulesGetRequest pretty(Boolean pretty) {
            this.pretty = pretty;
            return this;
        }

        /**
         * Set depth
         * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
         * @return APIdatacentersNatgatewaysRulesGetRequest
         */
        public APIdatacentersNatgatewaysRulesGetRequest depth(Integer depth) {
            this.depth = depth;
            return this;
        }

        /**
         * Set xContractNumber
         * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
         * @return APIdatacentersNatgatewaysRulesGetRequest
         */
        public APIdatacentersNatgatewaysRulesGetRequest xContractNumber(Integer xContractNumber) {
            this.xContractNumber = xContractNumber;
            return this;
        }


        /**
        * Set orderBy
        * @param orderBy Orders the response based on a property.
        * @return APIdatacentersNatgatewaysRulesGetRequest
        */
        public APIdatacentersNatgatewaysRulesGetRequest orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }

        /**
        * Set maxResults
        * @param maxResults Limits the number of items in a response.
        * @return APIdatacentersNatgatewaysRulesGetRequest
        */
        public APIdatacentersNatgatewaysRulesGetRequest maxResults(Integer maxResults) {
            this.maxResults = maxResults;
            return this;
        }

        /**
        * Set filters
        * @param filters Filters the response based on a property.
        * @return APIdatacentersNatgatewaysRulesGetRequest
        */
        public APIdatacentersNatgatewaysRulesGetRequest filters(Map<String, String> filters) {
            this.filters = filters;
            return this;
        }


        /**
         * Build call for datacentersNatgatewaysRulesGet
         * @param callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback callback) throws ApiException {
            return datacentersNatgatewaysRulesGetCall(datacenterId, natGatewayId, pretty, depth, xContractNumber, orderBy, maxResults, filters, callback);
        }

        /**
         * Execute datacentersNatgatewaysRulesGet request
         * @return NatGatewayRules
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public NatGatewayRules execute() throws ApiException {
        ApiResponse<NatGatewayRules> localVarResp = datacentersNatgatewaysRulesGetWithHttpInfo(datacenterId, natGatewayId, pretty, depth, xContractNumber, orderBy, maxResults, filters);
            return localVarResp.getData();
        }

        /**
         * Execute datacentersNatgatewaysRulesGet request with HTTP info returned
         * @return ApiResponse&lt;NatGatewayRules&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NatGatewayRules> executeWithHttpInfo() throws ApiException {
            return datacentersNatgatewaysRulesGetWithHttpInfo(datacenterId, natGatewayId, pretty, depth, xContractNumber, orderBy, maxResults, filters);
        }

        /**
         * Execute datacentersNatgatewaysRulesGet request (asynchronously)
         * @param callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NatGatewayRules> callback) throws ApiException {
            return datacentersNatgatewaysRulesGetAsync(datacenterId, natGatewayId, pretty, depth, xContractNumber, orderBy, maxResults, filters, callback);
        }
    }

    /**
     * List NAT Gateway rules
     * List all rules for the specified NAT Gateway.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @return APIdatacentersNatgatewaysRulesGetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public APIdatacentersNatgatewaysRulesGetRequest datacentersNatgatewaysRulesGet(String datacenterId, String natGatewayId) {
        return new APIdatacentersNatgatewaysRulesGetRequest(datacenterId, natGatewayId);
    }
    /**
     * Build call for datacentersNatgatewaysRulesPatch
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayRuleId The unique ID of the NAT Gateway rule. (required)
     * @param natGatewayRuleProperties The properties of the NAT Gateway rule to be updated. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysRulesPatchCall(String datacenterId, String natGatewayId, String natGatewayRuleId, NatGatewayRuleProperties natGatewayRuleProperties, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback ) throws ApiException {
        Object localVarPostBody = natGatewayRuleProperties;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}/rules/{natGatewayRuleId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "natGatewayId" + "\\}", localVarApiClient.escapeString(natGatewayId.toString()))
            .replaceAll("\\{" + "natGatewayRuleId" + "\\}", localVarApiClient.escapeString(natGatewayRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }
        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNatgatewaysRulesPatchValidateBeforeCall(String datacenterId, String natGatewayId, String natGatewayRuleId, NatGatewayRuleProperties natGatewayRuleProperties, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNatgatewaysRulesPatch(Async)");
        }
        
        // verify the required parameter 'natGatewayId' is set
        if (natGatewayId == null) {
            throw new ApiException("Missing the required parameter 'natGatewayId' when calling datacentersNatgatewaysRulesPatch(Async)");
        }
        
        // verify the required parameter 'natGatewayRuleId' is set
        if (natGatewayRuleId == null) {
            throw new ApiException("Missing the required parameter 'natGatewayRuleId' when calling datacentersNatgatewaysRulesPatch(Async)");
        }
        
        // verify the required parameter 'natGatewayRuleProperties' is set
        if (natGatewayRuleProperties == null) {
            throw new ApiException("Missing the required parameter 'natGatewayRuleProperties' when calling datacentersNatgatewaysRulesPatch(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNatgatewaysRulesPatchCall(datacenterId, natGatewayId, natGatewayRuleId, natGatewayRuleProperties, pretty, depth, xContractNumber, callback);
        return localVarCall;

    }

    /**
     * Partially Modify a NAT Gateway Rule by ID
     * Updates the properties of the specified NAT Gateway rule.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayRuleId The unique ID of the NAT Gateway rule. (required)
     * @param natGatewayRuleProperties The properties of the NAT Gateway rule to be updated. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * 
     * @return NatGatewayRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public NatGatewayRule datacentersNatgatewaysRulesPatch(String datacenterId, String natGatewayId, String natGatewayRuleId, NatGatewayRuleProperties natGatewayRuleProperties, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<NatGatewayRule> localVarResp = datacentersNatgatewaysRulesPatchWithHttpInfo(datacenterId, natGatewayId, natGatewayRuleId, natGatewayRuleProperties, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * Partially Modify a NAT Gateway Rule by ID
     * Updates the properties of the specified NAT Gateway rule.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayRuleId The unique ID of the NAT Gateway rule. (required)
     * @param natGatewayRuleProperties The properties of the NAT Gateway rule to be updated. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * 
     * @return ApiResponse&lt;NatGatewayRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NatGatewayRule> datacentersNatgatewaysRulesPatchWithHttpInfo(String datacenterId, String natGatewayId, String natGatewayRuleId, NatGatewayRuleProperties natGatewayRuleProperties, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersNatgatewaysRulesPatchValidateBeforeCall(datacenterId, natGatewayId, natGatewayRuleId, natGatewayRuleProperties, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<NatGatewayRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Partially Modify a NAT Gateway Rule by ID (asynchronously)
     * Updates the properties of the specified NAT Gateway rule.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayRuleId The unique ID of the NAT Gateway rule. (required)
     * @param natGatewayRuleProperties The properties of the NAT Gateway rule to be updated. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysRulesPatchAsync(String datacenterId, String natGatewayId, String natGatewayRuleId, NatGatewayRuleProperties natGatewayRuleProperties, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NatGatewayRule> callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNatgatewaysRulesPatchValidateBeforeCall(datacenterId, natGatewayId, natGatewayRuleId, natGatewayRuleProperties, pretty, depth, xContractNumber, callback);
        Type localVarReturnType = new TypeToken<NatGatewayRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return localVarCall;
    }

    public class APIdatacentersNatgatewaysRulesPatchRequest {
        private final String datacenterId;
        private final String natGatewayId;
        private final String natGatewayRuleId;
        private final NatGatewayRuleProperties natGatewayRuleProperties;
        private Boolean pretty;
        private Integer depth;
        private Integer xContractNumber;

        private APIdatacentersNatgatewaysRulesPatchRequest(String datacenterId, String natGatewayId, String natGatewayRuleId, NatGatewayRuleProperties natGatewayRuleProperties) {
            this.datacenterId = datacenterId;
            this.natGatewayId = natGatewayId;
            this.natGatewayRuleId = natGatewayRuleId;
            this.natGatewayRuleProperties = natGatewayRuleProperties;
        }

        /**
         * Set pretty
         * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
         * @return APIdatacentersNatgatewaysRulesPatchRequest
         */
        public APIdatacentersNatgatewaysRulesPatchRequest pretty(Boolean pretty) {
            this.pretty = pretty;
            return this;
        }

        /**
         * Set depth
         * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
         * @return APIdatacentersNatgatewaysRulesPatchRequest
         */
        public APIdatacentersNatgatewaysRulesPatchRequest depth(Integer depth) {
            this.depth = depth;
            return this;
        }

        /**
         * Set xContractNumber
         * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
         * @return APIdatacentersNatgatewaysRulesPatchRequest
         */
        public APIdatacentersNatgatewaysRulesPatchRequest xContractNumber(Integer xContractNumber) {
            this.xContractNumber = xContractNumber;
            return this;
        }


        /**
         * Build call for datacentersNatgatewaysRulesPatch
         * @param callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback callback) throws ApiException {
            return datacentersNatgatewaysRulesPatchCall(datacenterId, natGatewayId, natGatewayRuleId, natGatewayRuleProperties, pretty, depth, xContractNumber, callback);
        }

        /**
         * Execute datacentersNatgatewaysRulesPatch request
         * @return NatGatewayRule
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public NatGatewayRule execute() throws ApiException {
        ApiResponse<NatGatewayRule> localVarResp = datacentersNatgatewaysRulesPatchWithHttpInfo(datacenterId, natGatewayId, natGatewayRuleId, natGatewayRuleProperties, pretty, depth, xContractNumber);
            return localVarResp.getData();
        }

        /**
         * Execute datacentersNatgatewaysRulesPatch request with HTTP info returned
         * @return ApiResponse&lt;NatGatewayRule&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NatGatewayRule> executeWithHttpInfo() throws ApiException {
            return datacentersNatgatewaysRulesPatchWithHttpInfo(datacenterId, natGatewayId, natGatewayRuleId, natGatewayRuleProperties, pretty, depth, xContractNumber);
        }

        /**
         * Execute datacentersNatgatewaysRulesPatch request (asynchronously)
         * @param callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NatGatewayRule> callback) throws ApiException {
            return datacentersNatgatewaysRulesPatchAsync(datacenterId, natGatewayId, natGatewayRuleId, natGatewayRuleProperties, pretty, depth, xContractNumber, callback);
        }
    }

    /**
     * Partially Modify a NAT Gateway Rule by ID
     * Updates the properties of the specified NAT Gateway rule.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayRuleId The unique ID of the NAT Gateway rule. (required)
     * @param natGatewayRuleProperties The properties of the NAT Gateway rule to be updated. (required)
     * @return APIdatacentersNatgatewaysRulesPatchRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public APIdatacentersNatgatewaysRulesPatchRequest datacentersNatgatewaysRulesPatch(String datacenterId, String natGatewayId, String natGatewayRuleId, NatGatewayRuleProperties natGatewayRuleProperties) {
        return new APIdatacentersNatgatewaysRulesPatchRequest(datacenterId, natGatewayId, natGatewayRuleId, natGatewayRuleProperties);
    }
    /**
     * Build call for datacentersNatgatewaysRulesPost
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayRule The NAT Gateway rule to create. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysRulesPostCall(String datacenterId, String natGatewayId, NatGatewayRule natGatewayRule, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback ) throws ApiException {
        Object localVarPostBody = natGatewayRule;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}/rules"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "natGatewayId" + "\\}", localVarApiClient.escapeString(natGatewayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }
        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNatgatewaysRulesPostValidateBeforeCall(String datacenterId, String natGatewayId, NatGatewayRule natGatewayRule, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNatgatewaysRulesPost(Async)");
        }
        
        // verify the required parameter 'natGatewayId' is set
        if (natGatewayId == null) {
            throw new ApiException("Missing the required parameter 'natGatewayId' when calling datacentersNatgatewaysRulesPost(Async)");
        }
        
        // verify the required parameter 'natGatewayRule' is set
        if (natGatewayRule == null) {
            throw new ApiException("Missing the required parameter 'natGatewayRule' when calling datacentersNatgatewaysRulesPost(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNatgatewaysRulesPostCall(datacenterId, natGatewayId, natGatewayRule, pretty, depth, xContractNumber, callback);
        return localVarCall;

    }

    /**
     * Create a NAT Gateway Rule
     * Creates a rule for the specified NAT Gateway.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayRule The NAT Gateway rule to create. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * 
     * @return NatGatewayRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public NatGatewayRule datacentersNatgatewaysRulesPost(String datacenterId, String natGatewayId, NatGatewayRule natGatewayRule, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<NatGatewayRule> localVarResp = datacentersNatgatewaysRulesPostWithHttpInfo(datacenterId, natGatewayId, natGatewayRule, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * Create a NAT Gateway Rule
     * Creates a rule for the specified NAT Gateway.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayRule The NAT Gateway rule to create. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * 
     * @return ApiResponse&lt;NatGatewayRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NatGatewayRule> datacentersNatgatewaysRulesPostWithHttpInfo(String datacenterId, String natGatewayId, NatGatewayRule natGatewayRule, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersNatgatewaysRulesPostValidateBeforeCall(datacenterId, natGatewayId, natGatewayRule, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<NatGatewayRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a NAT Gateway Rule (asynchronously)
     * Creates a rule for the specified NAT Gateway.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayRule The NAT Gateway rule to create. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysRulesPostAsync(String datacenterId, String natGatewayId, NatGatewayRule natGatewayRule, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NatGatewayRule> callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNatgatewaysRulesPostValidateBeforeCall(datacenterId, natGatewayId, natGatewayRule, pretty, depth, xContractNumber, callback);
        Type localVarReturnType = new TypeToken<NatGatewayRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return localVarCall;
    }

    public class APIdatacentersNatgatewaysRulesPostRequest {
        private final String datacenterId;
        private final String natGatewayId;
        private final NatGatewayRule natGatewayRule;
        private Boolean pretty;
        private Integer depth;
        private Integer xContractNumber;

        private APIdatacentersNatgatewaysRulesPostRequest(String datacenterId, String natGatewayId, NatGatewayRule natGatewayRule) {
            this.datacenterId = datacenterId;
            this.natGatewayId = natGatewayId;
            this.natGatewayRule = natGatewayRule;
        }

        /**
         * Set pretty
         * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
         * @return APIdatacentersNatgatewaysRulesPostRequest
         */
        public APIdatacentersNatgatewaysRulesPostRequest pretty(Boolean pretty) {
            this.pretty = pretty;
            return this;
        }

        /**
         * Set depth
         * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
         * @return APIdatacentersNatgatewaysRulesPostRequest
         */
        public APIdatacentersNatgatewaysRulesPostRequest depth(Integer depth) {
            this.depth = depth;
            return this;
        }

        /**
         * Set xContractNumber
         * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
         * @return APIdatacentersNatgatewaysRulesPostRequest
         */
        public APIdatacentersNatgatewaysRulesPostRequest xContractNumber(Integer xContractNumber) {
            this.xContractNumber = xContractNumber;
            return this;
        }


        /**
         * Build call for datacentersNatgatewaysRulesPost
         * @param callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback callback) throws ApiException {
            return datacentersNatgatewaysRulesPostCall(datacenterId, natGatewayId, natGatewayRule, pretty, depth, xContractNumber, callback);
        }

        /**
         * Execute datacentersNatgatewaysRulesPost request
         * @return NatGatewayRule
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public NatGatewayRule execute() throws ApiException {
        ApiResponse<NatGatewayRule> localVarResp = datacentersNatgatewaysRulesPostWithHttpInfo(datacenterId, natGatewayId, natGatewayRule, pretty, depth, xContractNumber);
            return localVarResp.getData();
        }

        /**
         * Execute datacentersNatgatewaysRulesPost request with HTTP info returned
         * @return ApiResponse&lt;NatGatewayRule&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NatGatewayRule> executeWithHttpInfo() throws ApiException {
            return datacentersNatgatewaysRulesPostWithHttpInfo(datacenterId, natGatewayId, natGatewayRule, pretty, depth, xContractNumber);
        }

        /**
         * Execute datacentersNatgatewaysRulesPost request (asynchronously)
         * @param callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NatGatewayRule> callback) throws ApiException {
            return datacentersNatgatewaysRulesPostAsync(datacenterId, natGatewayId, natGatewayRule, pretty, depth, xContractNumber, callback);
        }
    }

    /**
     * Create a NAT Gateway Rule
     * Creates a rule for the specified NAT Gateway.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayRule The NAT Gateway rule to create. (required)
     * @return APIdatacentersNatgatewaysRulesPostRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public APIdatacentersNatgatewaysRulesPostRequest datacentersNatgatewaysRulesPost(String datacenterId, String natGatewayId, NatGatewayRule natGatewayRule) {
        return new APIdatacentersNatgatewaysRulesPostRequest(datacenterId, natGatewayId, natGatewayRule);
    }
    /**
     * Build call for datacentersNatgatewaysRulesPut
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayRuleId The unique ID of the NAT Gateway rule. (required)
     * @param natGatewayRule The modified NAT Gateway rule. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysRulesPutCall(String datacenterId, String natGatewayId, String natGatewayRuleId, NatGatewayRulePut natGatewayRule, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback ) throws ApiException {
        Object localVarPostBody = natGatewayRule;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/natgateways/{natGatewayId}/rules/{natGatewayRuleId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "natGatewayId" + "\\}", localVarApiClient.escapeString(natGatewayId.toString()))
            .replaceAll("\\{" + "natGatewayRuleId" + "\\}", localVarApiClient.escapeString(natGatewayRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }
        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNatgatewaysRulesPutValidateBeforeCall(String datacenterId, String natGatewayId, String natGatewayRuleId, NatGatewayRulePut natGatewayRule, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNatgatewaysRulesPut(Async)");
        }
        
        // verify the required parameter 'natGatewayId' is set
        if (natGatewayId == null) {
            throw new ApiException("Missing the required parameter 'natGatewayId' when calling datacentersNatgatewaysRulesPut(Async)");
        }
        
        // verify the required parameter 'natGatewayRuleId' is set
        if (natGatewayRuleId == null) {
            throw new ApiException("Missing the required parameter 'natGatewayRuleId' when calling datacentersNatgatewaysRulesPut(Async)");
        }
        
        // verify the required parameter 'natGatewayRule' is set
        if (natGatewayRule == null) {
            throw new ApiException("Missing the required parameter 'natGatewayRule' when calling datacentersNatgatewaysRulesPut(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNatgatewaysRulesPutCall(datacenterId, natGatewayId, natGatewayRuleId, natGatewayRule, pretty, depth, xContractNumber, callback);
        return localVarCall;

    }

    /**
     * Modify a NAT Gateway Rule by ID
     * Modify the specified NAT Gateway rule.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayRuleId The unique ID of the NAT Gateway rule. (required)
     * @param natGatewayRule The modified NAT Gateway rule. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * 
     * @return NatGatewayRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public NatGatewayRule datacentersNatgatewaysRulesPut(String datacenterId, String natGatewayId, String natGatewayRuleId, NatGatewayRulePut natGatewayRule, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<NatGatewayRule> localVarResp = datacentersNatgatewaysRulesPutWithHttpInfo(datacenterId, natGatewayId, natGatewayRuleId, natGatewayRule, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * Modify a NAT Gateway Rule by ID
     * Modify the specified NAT Gateway rule.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayRuleId The unique ID of the NAT Gateway rule. (required)
     * @param natGatewayRule The modified NAT Gateway rule. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * 
     * @return ApiResponse&lt;NatGatewayRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NatGatewayRule> datacentersNatgatewaysRulesPutWithHttpInfo(String datacenterId, String natGatewayId, String natGatewayRuleId, NatGatewayRulePut natGatewayRule, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersNatgatewaysRulesPutValidateBeforeCall(datacenterId, natGatewayId, natGatewayRuleId, natGatewayRule, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<NatGatewayRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify a NAT Gateway Rule by ID (asynchronously)
     * Modify the specified NAT Gateway rule.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayRuleId The unique ID of the NAT Gateway rule. (required)
     * @param natGatewayRule The modified NAT Gateway rule. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNatgatewaysRulesPutAsync(String datacenterId, String natGatewayId, String natGatewayRuleId, NatGatewayRulePut natGatewayRule, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NatGatewayRule> callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNatgatewaysRulesPutValidateBeforeCall(datacenterId, natGatewayId, natGatewayRuleId, natGatewayRule, pretty, depth, xContractNumber, callback);
        Type localVarReturnType = new TypeToken<NatGatewayRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, callback);
        return localVarCall;
    }

    public class APIdatacentersNatgatewaysRulesPutRequest {
        private final String datacenterId;
        private final String natGatewayId;
        private final String natGatewayRuleId;
        private final NatGatewayRulePut natGatewayRule;
        private Boolean pretty;
        private Integer depth;
        private Integer xContractNumber;

        private APIdatacentersNatgatewaysRulesPutRequest(String datacenterId, String natGatewayId, String natGatewayRuleId, NatGatewayRulePut natGatewayRule) {
            this.datacenterId = datacenterId;
            this.natGatewayId = natGatewayId;
            this.natGatewayRuleId = natGatewayRuleId;
            this.natGatewayRule = natGatewayRule;
        }

        /**
         * Set pretty
         * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
         * @return APIdatacentersNatgatewaysRulesPutRequest
         */
        public APIdatacentersNatgatewaysRulesPutRequest pretty(Boolean pretty) {
            this.pretty = pretty;
            return this;
        }

        /**
         * Set depth
         * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
         * @return APIdatacentersNatgatewaysRulesPutRequest
         */
        public APIdatacentersNatgatewaysRulesPutRequest depth(Integer depth) {
            this.depth = depth;
            return this;
        }

        /**
         * Set xContractNumber
         * @param xContractNumber Users with multiple contracts must provide the contract number, for which all API requests are to be executed. (optional)
         * @return APIdatacentersNatgatewaysRulesPutRequest
         */
        public APIdatacentersNatgatewaysRulesPutRequest xContractNumber(Integer xContractNumber) {
            this.xContractNumber = xContractNumber;
            return this;
        }


        /**
         * Build call for datacentersNatgatewaysRulesPut
         * @param callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback callback) throws ApiException {
            return datacentersNatgatewaysRulesPutCall(datacenterId, natGatewayId, natGatewayRuleId, natGatewayRule, pretty, depth, xContractNumber, callback);
        }

        /**
         * Execute datacentersNatgatewaysRulesPut request
         * @return NatGatewayRule
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public NatGatewayRule execute() throws ApiException {
        ApiResponse<NatGatewayRule> localVarResp = datacentersNatgatewaysRulesPutWithHttpInfo(datacenterId, natGatewayId, natGatewayRuleId, natGatewayRule, pretty, depth, xContractNumber);
            return localVarResp.getData();
        }

        /**
         * Execute datacentersNatgatewaysRulesPut request with HTTP info returned
         * @return ApiResponse&lt;NatGatewayRule&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NatGatewayRule> executeWithHttpInfo() throws ApiException {
            return datacentersNatgatewaysRulesPutWithHttpInfo(datacenterId, natGatewayId, natGatewayRuleId, natGatewayRule, pretty, depth, xContractNumber);
        }

        /**
         * Execute datacentersNatgatewaysRulesPut request (asynchronously)
         * @param callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
            <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NatGatewayRule> callback) throws ApiException {
            return datacentersNatgatewaysRulesPutAsync(datacenterId, natGatewayId, natGatewayRuleId, natGatewayRule, pretty, depth, xContractNumber, callback);
        }
    }

    /**
     * Modify a NAT Gateway Rule by ID
     * Modify the specified NAT Gateway rule.
     * @param datacenterId The unique ID of the data center. (required)
     * @param natGatewayId The unique ID of the NAT Gateway. (required)
     * @param natGatewayRuleId The unique ID of the NAT Gateway rule. (required)
     * @param natGatewayRule The modified NAT Gateway rule. (required)
     * @return APIdatacentersNatgatewaysRulesPutRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public APIdatacentersNatgatewaysRulesPutRequest datacentersNatgatewaysRulesPut(String datacenterId, String natGatewayId, String natGatewayRuleId, NatGatewayRulePut natGatewayRule) {
        return new APIdatacentersNatgatewaysRulesPutRequest(datacenterId, natGatewayId, natGatewayRuleId, natGatewayRule);
    }
}
