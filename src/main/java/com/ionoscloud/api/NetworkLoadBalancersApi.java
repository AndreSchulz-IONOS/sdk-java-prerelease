/*
 * CLOUD API
 * IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * The version of the OpenAPI document: 6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.api;

import com.ionoscloud.ApiCallback;
import com.ionoscloud.ApiClient;
import com.ionoscloud.ApiException;
import com.ionoscloud.ApiResponse;
import com.ionoscloud.Configuration;
import com.ionoscloud.Pair;
import com.ionoscloud.ProgressRequestBody;
import com.ionoscloud.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ionoscloud.model.Error;
import com.ionoscloud.model.FlowLog;
import com.ionoscloud.model.FlowLogProperties;
import com.ionoscloud.model.FlowLogPut;
import com.ionoscloud.model.FlowLogs;
import com.ionoscloud.model.NetworkLoadBalancer;
import com.ionoscloud.model.NetworkLoadBalancerForwardingRule;
import com.ionoscloud.model.NetworkLoadBalancerForwardingRuleProperties;
import com.ionoscloud.model.NetworkLoadBalancerForwardingRulePut;
import com.ionoscloud.model.NetworkLoadBalancerForwardingRules;
import com.ionoscloud.model.NetworkLoadBalancerProperties;
import com.ionoscloud.model.NetworkLoadBalancerPut;
import com.ionoscloud.model.NetworkLoadBalancers;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NetworkLoadBalancersApi {
    private ApiClient localVarApiClient;

    public NetworkLoadBalancersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NetworkLoadBalancersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for datacentersNetworkloadbalancersDelete
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersDeleteCall(String datacenterId, String networkLoadBalancerId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<Void> _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "networkLoadBalancerId" + "\\}", localVarApiClient.escapeString(networkLoadBalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNetworkloadbalancersDeleteValidateBeforeCall(String datacenterId, String networkLoadBalancerId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<Void> _callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNetworkloadbalancersDelete(Async)");
        }
        
        // verify the required parameter 'networkLoadBalancerId' is set
        if (networkLoadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'networkLoadBalancerId' when calling datacentersNetworkloadbalancersDelete(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersDeleteCall(datacenterId, networkLoadBalancerId, pretty, depth, xContractNumber, _callback);
        return localVarCall;

    }

    /**
     * Delete Network Load Balancers
     * Remove the specified Network Load Balancer from the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public void datacentersNetworkloadbalancersDelete(String datacenterId, String networkLoadBalancerId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        datacentersNetworkloadbalancersDeleteWithHttpInfo(datacenterId, networkLoadBalancerId, pretty, depth, xContractNumber);
    }

    /**
     * Delete Network Load Balancers
     * Remove the specified Network Load Balancer from the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> datacentersNetworkloadbalancersDeleteWithHttpInfo(String datacenterId, String networkLoadBalancerId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersNetworkloadbalancersDeleteValidateBeforeCall(datacenterId, networkLoadBalancerId, pretty, depth, xContractNumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Network Load Balancers (asynchronously)
     * Remove the specified Network Load Balancer from the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersDeleteAsync(String datacenterId, String networkLoadBalancerId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersDeleteValidateBeforeCall(datacenterId, networkLoadBalancerId, pretty, depth, xContractNumber, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersNetworkloadbalancersFindByNetworkLoadBalancerId
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersFindByNetworkLoadBalancerIdCall(String datacenterId, String networkLoadBalancerId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NetworkLoadBalancer> _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "networkLoadBalancerId" + "\\}", localVarApiClient.escapeString(networkLoadBalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNetworkloadbalancersFindByNetworkLoadBalancerIdValidateBeforeCall(String datacenterId, String networkLoadBalancerId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NetworkLoadBalancer> _callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNetworkloadbalancersFindByNetworkLoadBalancerId(Async)");
        }
        
        // verify the required parameter 'networkLoadBalancerId' is set
        if (networkLoadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'networkLoadBalancerId' when calling datacentersNetworkloadbalancersFindByNetworkLoadBalancerId(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersFindByNetworkLoadBalancerIdCall(datacenterId, networkLoadBalancerId, pretty, depth, xContractNumber, _callback);
        return localVarCall;

    }

    /**
     * Retrieve Network Load Balancers
     * Retrieve the properties of the specified Network Load Balancer within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return NetworkLoadBalancer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public NetworkLoadBalancer datacentersNetworkloadbalancersFindByNetworkLoadBalancerId(String datacenterId, String networkLoadBalancerId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<NetworkLoadBalancer> localVarResp = datacentersNetworkloadbalancersFindByNetworkLoadBalancerIdWithHttpInfo(datacenterId, networkLoadBalancerId, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * Retrieve Network Load Balancers
     * Retrieve the properties of the specified Network Load Balancer within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return ApiResponse&lt;NetworkLoadBalancer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkLoadBalancer> datacentersNetworkloadbalancersFindByNetworkLoadBalancerIdWithHttpInfo(String datacenterId, String networkLoadBalancerId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersNetworkloadbalancersFindByNetworkLoadBalancerIdValidateBeforeCall(datacenterId, networkLoadBalancerId, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<NetworkLoadBalancer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Network Load Balancers (asynchronously)
     * Retrieve the properties of the specified Network Load Balancer within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersFindByNetworkLoadBalancerIdAsync(String datacenterId, String networkLoadBalancerId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NetworkLoadBalancer> _callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersFindByNetworkLoadBalancerIdValidateBeforeCall(datacenterId, networkLoadBalancerId, pretty, depth, xContractNumber, _callback);
        Type localVarReturnType = new TypeToken<NetworkLoadBalancer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersNetworkloadbalancersFlowlogsDelete
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersFlowlogsDeleteCall(String datacenterId, String networkLoadBalancerId, String flowLogId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<Void> _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}/flowlogs/{flowLogId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "networkLoadBalancerId" + "\\}", localVarApiClient.escapeString(networkLoadBalancerId.toString()))
            .replaceAll("\\{" + "flowLogId" + "\\}", localVarApiClient.escapeString(flowLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNetworkloadbalancersFlowlogsDeleteValidateBeforeCall(String datacenterId, String networkLoadBalancerId, String flowLogId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<Void> _callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNetworkloadbalancersFlowlogsDelete(Async)");
        }
        
        // verify the required parameter 'networkLoadBalancerId' is set
        if (networkLoadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'networkLoadBalancerId' when calling datacentersNetworkloadbalancersFlowlogsDelete(Async)");
        }
        
        // verify the required parameter 'flowLogId' is set
        if (flowLogId == null) {
            throw new ApiException("Missing the required parameter 'flowLogId' when calling datacentersNetworkloadbalancersFlowlogsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersFlowlogsDeleteCall(datacenterId, networkLoadBalancerId, flowLogId, pretty, depth, xContractNumber, _callback);
        return localVarCall;

    }

    /**
     * Delete NLB Flow Logs
     * Delete the specified Network Load Balancer Flow Log.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public void datacentersNetworkloadbalancersFlowlogsDelete(String datacenterId, String networkLoadBalancerId, String flowLogId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        datacentersNetworkloadbalancersFlowlogsDeleteWithHttpInfo(datacenterId, networkLoadBalancerId, flowLogId, pretty, depth, xContractNumber);
    }

    /**
     * Delete NLB Flow Logs
     * Delete the specified Network Load Balancer Flow Log.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> datacentersNetworkloadbalancersFlowlogsDeleteWithHttpInfo(String datacenterId, String networkLoadBalancerId, String flowLogId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersNetworkloadbalancersFlowlogsDeleteValidateBeforeCall(datacenterId, networkLoadBalancerId, flowLogId, pretty, depth, xContractNumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete NLB Flow Logs (asynchronously)
     * Delete the specified Network Load Balancer Flow Log.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersFlowlogsDeleteAsync(String datacenterId, String networkLoadBalancerId, String flowLogId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersFlowlogsDeleteValidateBeforeCall(datacenterId, networkLoadBalancerId, flowLogId, pretty, depth, xContractNumber, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersNetworkloadbalancersFlowlogsFindByFlowLogId
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersFlowlogsFindByFlowLogIdCall(String datacenterId, String networkLoadBalancerId, String flowLogId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<FlowLog> _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}/flowlogs/{flowLogId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "networkLoadBalancerId" + "\\}", localVarApiClient.escapeString(networkLoadBalancerId.toString()))
            .replaceAll("\\{" + "flowLogId" + "\\}", localVarApiClient.escapeString(flowLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNetworkloadbalancersFlowlogsFindByFlowLogIdValidateBeforeCall(String datacenterId, String networkLoadBalancerId, String flowLogId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<FlowLog> _callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNetworkloadbalancersFlowlogsFindByFlowLogId(Async)");
        }
        
        // verify the required parameter 'networkLoadBalancerId' is set
        if (networkLoadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'networkLoadBalancerId' when calling datacentersNetworkloadbalancersFlowlogsFindByFlowLogId(Async)");
        }
        
        // verify the required parameter 'flowLogId' is set
        if (flowLogId == null) {
            throw new ApiException("Missing the required parameter 'flowLogId' when calling datacentersNetworkloadbalancersFlowlogsFindByFlowLogId(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersFlowlogsFindByFlowLogIdCall(datacenterId, networkLoadBalancerId, flowLogId, pretty, depth, xContractNumber, _callback);
        return localVarCall;

    }

    /**
     * Retrieve NLB Flow Logs
     * Retrieve the specified Network Load Balancer Flow Log.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return FlowLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public FlowLog datacentersNetworkloadbalancersFlowlogsFindByFlowLogId(String datacenterId, String networkLoadBalancerId, String flowLogId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<FlowLog> localVarResp = datacentersNetworkloadbalancersFlowlogsFindByFlowLogIdWithHttpInfo(datacenterId, networkLoadBalancerId, flowLogId, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * Retrieve NLB Flow Logs
     * Retrieve the specified Network Load Balancer Flow Log.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return ApiResponse&lt;FlowLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlowLog> datacentersNetworkloadbalancersFlowlogsFindByFlowLogIdWithHttpInfo(String datacenterId, String networkLoadBalancerId, String flowLogId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersNetworkloadbalancersFlowlogsFindByFlowLogIdValidateBeforeCall(datacenterId, networkLoadBalancerId, flowLogId, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<FlowLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve NLB Flow Logs (asynchronously)
     * Retrieve the specified Network Load Balancer Flow Log.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersFlowlogsFindByFlowLogIdAsync(String datacenterId, String networkLoadBalancerId, String flowLogId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<FlowLog> _callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersFlowlogsFindByFlowLogIdValidateBeforeCall(datacenterId, networkLoadBalancerId, flowLogId, pretty, depth, xContractNumber, _callback);
        Type localVarReturnType = new TypeToken<FlowLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersNetworkloadbalancersFlowlogsGet
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersFlowlogsGetCall(String datacenterId, String networkLoadBalancerId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<FlowLogs> _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}/flowlogs"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "networkLoadBalancerId" + "\\}", localVarApiClient.escapeString(networkLoadBalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNetworkloadbalancersFlowlogsGetValidateBeforeCall(String datacenterId, String networkLoadBalancerId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<FlowLogs> _callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNetworkloadbalancersFlowlogsGet(Async)");
        }
        
        // verify the required parameter 'networkLoadBalancerId' is set
        if (networkLoadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'networkLoadBalancerId' when calling datacentersNetworkloadbalancersFlowlogsGet(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersFlowlogsGetCall(datacenterId, networkLoadBalancerId, pretty, depth, xContractNumber, _callback);
        return localVarCall;

    }

    /**
     * List NLB Flow Logs
     * List all the Flow Logs for the specified Network Load Balancer.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return FlowLogs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public FlowLogs datacentersNetworkloadbalancersFlowlogsGet(String datacenterId, String networkLoadBalancerId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<FlowLogs> localVarResp = datacentersNetworkloadbalancersFlowlogsGetWithHttpInfo(datacenterId, networkLoadBalancerId, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * List NLB Flow Logs
     * List all the Flow Logs for the specified Network Load Balancer.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return ApiResponse&lt;FlowLogs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlowLogs> datacentersNetworkloadbalancersFlowlogsGetWithHttpInfo(String datacenterId, String networkLoadBalancerId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersNetworkloadbalancersFlowlogsGetValidateBeforeCall(datacenterId, networkLoadBalancerId, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<FlowLogs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List NLB Flow Logs (asynchronously)
     * List all the Flow Logs for the specified Network Load Balancer.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersFlowlogsGetAsync(String datacenterId, String networkLoadBalancerId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<FlowLogs> _callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersFlowlogsGetValidateBeforeCall(datacenterId, networkLoadBalancerId, pretty, depth, xContractNumber, _callback);
        Type localVarReturnType = new TypeToken<FlowLogs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersNetworkloadbalancersFlowlogsPatch
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param networkLoadBalancerFlowLogProperties The properties of the Flow Log to be updated. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersFlowlogsPatchCall(String datacenterId, String networkLoadBalancerId, String flowLogId, FlowLogProperties networkLoadBalancerFlowLogProperties, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<FlowLog> _callback) throws ApiException {
        Object localVarPostBody = networkLoadBalancerFlowLogProperties;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}/flowlogs/{flowLogId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "networkLoadBalancerId" + "\\}", localVarApiClient.escapeString(networkLoadBalancerId.toString()))
            .replaceAll("\\{" + "flowLogId" + "\\}", localVarApiClient.escapeString(flowLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNetworkloadbalancersFlowlogsPatchValidateBeforeCall(String datacenterId, String networkLoadBalancerId, String flowLogId, FlowLogProperties networkLoadBalancerFlowLogProperties, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<FlowLog> _callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNetworkloadbalancersFlowlogsPatch(Async)");
        }
        
        // verify the required parameter 'networkLoadBalancerId' is set
        if (networkLoadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'networkLoadBalancerId' when calling datacentersNetworkloadbalancersFlowlogsPatch(Async)");
        }
        
        // verify the required parameter 'flowLogId' is set
        if (flowLogId == null) {
            throw new ApiException("Missing the required parameter 'flowLogId' when calling datacentersNetworkloadbalancersFlowlogsPatch(Async)");
        }
        
        // verify the required parameter 'networkLoadBalancerFlowLogProperties' is set
        if (networkLoadBalancerFlowLogProperties == null) {
            throw new ApiException("Missing the required parameter 'networkLoadBalancerFlowLogProperties' when calling datacentersNetworkloadbalancersFlowlogsPatch(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersFlowlogsPatchCall(datacenterId, networkLoadBalancerId, flowLogId, networkLoadBalancerFlowLogProperties, pretty, depth, xContractNumber, _callback);
        return localVarCall;

    }

    /**
     * Partially modify NLB Flow Logs
     * Update the properties of the specified Network Load Balancer Flow Log.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param networkLoadBalancerFlowLogProperties The properties of the Flow Log to be updated. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return FlowLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public FlowLog datacentersNetworkloadbalancersFlowlogsPatch(String datacenterId, String networkLoadBalancerId, String flowLogId, FlowLogProperties networkLoadBalancerFlowLogProperties, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<FlowLog> localVarResp = datacentersNetworkloadbalancersFlowlogsPatchWithHttpInfo(datacenterId, networkLoadBalancerId, flowLogId, networkLoadBalancerFlowLogProperties, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * Partially modify NLB Flow Logs
     * Update the properties of the specified Network Load Balancer Flow Log.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param networkLoadBalancerFlowLogProperties The properties of the Flow Log to be updated. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return ApiResponse&lt;FlowLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlowLog> datacentersNetworkloadbalancersFlowlogsPatchWithHttpInfo(String datacenterId, String networkLoadBalancerId, String flowLogId, FlowLogProperties networkLoadBalancerFlowLogProperties, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersNetworkloadbalancersFlowlogsPatchValidateBeforeCall(datacenterId, networkLoadBalancerId, flowLogId, networkLoadBalancerFlowLogProperties, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<FlowLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Partially modify NLB Flow Logs (asynchronously)
     * Update the properties of the specified Network Load Balancer Flow Log.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param networkLoadBalancerFlowLogProperties The properties of the Flow Log to be updated. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersFlowlogsPatchAsync(String datacenterId, String networkLoadBalancerId, String flowLogId, FlowLogProperties networkLoadBalancerFlowLogProperties, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<FlowLog> _callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersFlowlogsPatchValidateBeforeCall(datacenterId, networkLoadBalancerId, flowLogId, networkLoadBalancerFlowLogProperties, pretty, depth, xContractNumber, _callback);
        Type localVarReturnType = new TypeToken<FlowLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersNetworkloadbalancersFlowlogsPost
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param networkLoadBalancerFlowLog The Flow Log to create. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersFlowlogsPostCall(String datacenterId, String networkLoadBalancerId, FlowLog networkLoadBalancerFlowLog, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<FlowLog> _callback) throws ApiException {
        Object localVarPostBody = networkLoadBalancerFlowLog;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}/flowlogs"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "networkLoadBalancerId" + "\\}", localVarApiClient.escapeString(networkLoadBalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNetworkloadbalancersFlowlogsPostValidateBeforeCall(String datacenterId, String networkLoadBalancerId, FlowLog networkLoadBalancerFlowLog, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<FlowLog> _callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNetworkloadbalancersFlowlogsPost(Async)");
        }
        
        // verify the required parameter 'networkLoadBalancerId' is set
        if (networkLoadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'networkLoadBalancerId' when calling datacentersNetworkloadbalancersFlowlogsPost(Async)");
        }
        
        // verify the required parameter 'networkLoadBalancerFlowLog' is set
        if (networkLoadBalancerFlowLog == null) {
            throw new ApiException("Missing the required parameter 'networkLoadBalancerFlowLog' when calling datacentersNetworkloadbalancersFlowlogsPost(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersFlowlogsPostCall(datacenterId, networkLoadBalancerId, networkLoadBalancerFlowLog, pretty, depth, xContractNumber, _callback);
        return localVarCall;

    }

    /**
     * Create NLB Flow Logs
     * Add a new Flow Log for the Network Load Balancer.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param networkLoadBalancerFlowLog The Flow Log to create. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return FlowLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public FlowLog datacentersNetworkloadbalancersFlowlogsPost(String datacenterId, String networkLoadBalancerId, FlowLog networkLoadBalancerFlowLog, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<FlowLog> localVarResp = datacentersNetworkloadbalancersFlowlogsPostWithHttpInfo(datacenterId, networkLoadBalancerId, networkLoadBalancerFlowLog, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * Create NLB Flow Logs
     * Add a new Flow Log for the Network Load Balancer.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param networkLoadBalancerFlowLog The Flow Log to create. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return ApiResponse&lt;FlowLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlowLog> datacentersNetworkloadbalancersFlowlogsPostWithHttpInfo(String datacenterId, String networkLoadBalancerId, FlowLog networkLoadBalancerFlowLog, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersNetworkloadbalancersFlowlogsPostValidateBeforeCall(datacenterId, networkLoadBalancerId, networkLoadBalancerFlowLog, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<FlowLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create NLB Flow Logs (asynchronously)
     * Add a new Flow Log for the Network Load Balancer.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param networkLoadBalancerFlowLog The Flow Log to create. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersFlowlogsPostAsync(String datacenterId, String networkLoadBalancerId, FlowLog networkLoadBalancerFlowLog, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<FlowLog> _callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersFlowlogsPostValidateBeforeCall(datacenterId, networkLoadBalancerId, networkLoadBalancerFlowLog, pretty, depth, xContractNumber, _callback);
        Type localVarReturnType = new TypeToken<FlowLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersNetworkloadbalancersFlowlogsPut
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param networkLoadBalancerFlowLog The modified NLB Flow Log. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersFlowlogsPutCall(String datacenterId, String networkLoadBalancerId, String flowLogId, FlowLogPut networkLoadBalancerFlowLog, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<FlowLog> _callback) throws ApiException {
        Object localVarPostBody = networkLoadBalancerFlowLog;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}/flowlogs/{flowLogId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "networkLoadBalancerId" + "\\}", localVarApiClient.escapeString(networkLoadBalancerId.toString()))
            .replaceAll("\\{" + "flowLogId" + "\\}", localVarApiClient.escapeString(flowLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNetworkloadbalancersFlowlogsPutValidateBeforeCall(String datacenterId, String networkLoadBalancerId, String flowLogId, FlowLogPut networkLoadBalancerFlowLog, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<FlowLog> _callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNetworkloadbalancersFlowlogsPut(Async)");
        }
        
        // verify the required parameter 'networkLoadBalancerId' is set
        if (networkLoadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'networkLoadBalancerId' when calling datacentersNetworkloadbalancersFlowlogsPut(Async)");
        }
        
        // verify the required parameter 'flowLogId' is set
        if (flowLogId == null) {
            throw new ApiException("Missing the required parameter 'flowLogId' when calling datacentersNetworkloadbalancersFlowlogsPut(Async)");
        }
        
        // verify the required parameter 'networkLoadBalancerFlowLog' is set
        if (networkLoadBalancerFlowLog == null) {
            throw new ApiException("Missing the required parameter 'networkLoadBalancerFlowLog' when calling datacentersNetworkloadbalancersFlowlogsPut(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersFlowlogsPutCall(datacenterId, networkLoadBalancerId, flowLogId, networkLoadBalancerFlowLog, pretty, depth, xContractNumber, _callback);
        return localVarCall;

    }

    /**
     * Modify NLB Flow Logs
     * Modify the specified Network Load Balancer Flow Log.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param networkLoadBalancerFlowLog The modified NLB Flow Log. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return FlowLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public FlowLog datacentersNetworkloadbalancersFlowlogsPut(String datacenterId, String networkLoadBalancerId, String flowLogId, FlowLogPut networkLoadBalancerFlowLog, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<FlowLog> localVarResp = datacentersNetworkloadbalancersFlowlogsPutWithHttpInfo(datacenterId, networkLoadBalancerId, flowLogId, networkLoadBalancerFlowLog, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * Modify NLB Flow Logs
     * Modify the specified Network Load Balancer Flow Log.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param networkLoadBalancerFlowLog The modified NLB Flow Log. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return ApiResponse&lt;FlowLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlowLog> datacentersNetworkloadbalancersFlowlogsPutWithHttpInfo(String datacenterId, String networkLoadBalancerId, String flowLogId, FlowLogPut networkLoadBalancerFlowLog, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersNetworkloadbalancersFlowlogsPutValidateBeforeCall(datacenterId, networkLoadBalancerId, flowLogId, networkLoadBalancerFlowLog, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<FlowLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify NLB Flow Logs (asynchronously)
     * Modify the specified Network Load Balancer Flow Log.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param flowLogId The unique ID of the Flow Log. (required)
     * @param networkLoadBalancerFlowLog The modified NLB Flow Log. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersFlowlogsPutAsync(String datacenterId, String networkLoadBalancerId, String flowLogId, FlowLogPut networkLoadBalancerFlowLog, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<FlowLog> _callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersFlowlogsPutValidateBeforeCall(datacenterId, networkLoadBalancerId, flowLogId, networkLoadBalancerFlowLog, pretty, depth, xContractNumber, _callback);
        Type localVarReturnType = new TypeToken<FlowLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersNetworkloadbalancersForwardingrulesDelete
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param forwardingRuleId The unique ID of the forwarding rule. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersForwardingrulesDeleteCall(String datacenterId, String networkLoadBalancerId, String forwardingRuleId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<Void> _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}/forwardingrules/{forwardingRuleId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "networkLoadBalancerId" + "\\}", localVarApiClient.escapeString(networkLoadBalancerId.toString()))
            .replaceAll("\\{" + "forwardingRuleId" + "\\}", localVarApiClient.escapeString(forwardingRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNetworkloadbalancersForwardingrulesDeleteValidateBeforeCall(String datacenterId, String networkLoadBalancerId, String forwardingRuleId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<Void> _callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNetworkloadbalancersForwardingrulesDelete(Async)");
        }
        
        // verify the required parameter 'networkLoadBalancerId' is set
        if (networkLoadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'networkLoadBalancerId' when calling datacentersNetworkloadbalancersForwardingrulesDelete(Async)");
        }
        
        // verify the required parameter 'forwardingRuleId' is set
        if (forwardingRuleId == null) {
            throw new ApiException("Missing the required parameter 'forwardingRuleId' when calling datacentersNetworkloadbalancersForwardingrulesDelete(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersForwardingrulesDeleteCall(datacenterId, networkLoadBalancerId, forwardingRuleId, pretty, depth, xContractNumber, _callback);
        return localVarCall;

    }

    /**
     * Delete NLB forwarding rules
     * Delete the specified Network Load Balancer forwarding rule.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param forwardingRuleId The unique ID of the forwarding rule. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public void datacentersNetworkloadbalancersForwardingrulesDelete(String datacenterId, String networkLoadBalancerId, String forwardingRuleId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        datacentersNetworkloadbalancersForwardingrulesDeleteWithHttpInfo(datacenterId, networkLoadBalancerId, forwardingRuleId, pretty, depth, xContractNumber);
    }

    /**
     * Delete NLB forwarding rules
     * Delete the specified Network Load Balancer forwarding rule.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param forwardingRuleId The unique ID of the forwarding rule. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> datacentersNetworkloadbalancersForwardingrulesDeleteWithHttpInfo(String datacenterId, String networkLoadBalancerId, String forwardingRuleId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersNetworkloadbalancersForwardingrulesDeleteValidateBeforeCall(datacenterId, networkLoadBalancerId, forwardingRuleId, pretty, depth, xContractNumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete NLB forwarding rules (asynchronously)
     * Delete the specified Network Load Balancer forwarding rule.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param forwardingRuleId The unique ID of the forwarding rule. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersForwardingrulesDeleteAsync(String datacenterId, String networkLoadBalancerId, String forwardingRuleId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersForwardingrulesDeleteValidateBeforeCall(datacenterId, networkLoadBalancerId, forwardingRuleId, pretty, depth, xContractNumber, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param forwardingRuleId The unique ID of the forwarding rule. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleIdCall(String datacenterId, String networkLoadBalancerId, String forwardingRuleId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NetworkLoadBalancerForwardingRule> _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}/forwardingrules/{forwardingRuleId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "networkLoadBalancerId" + "\\}", localVarApiClient.escapeString(networkLoadBalancerId.toString()))
            .replaceAll("\\{" + "forwardingRuleId" + "\\}", localVarApiClient.escapeString(forwardingRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleIdValidateBeforeCall(String datacenterId, String networkLoadBalancerId, String forwardingRuleId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NetworkLoadBalancerForwardingRule> _callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId(Async)");
        }
        
        // verify the required parameter 'networkLoadBalancerId' is set
        if (networkLoadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'networkLoadBalancerId' when calling datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId(Async)");
        }
        
        // verify the required parameter 'forwardingRuleId' is set
        if (forwardingRuleId == null) {
            throw new ApiException("Missing the required parameter 'forwardingRuleId' when calling datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleIdCall(datacenterId, networkLoadBalancerId, forwardingRuleId, pretty, depth, xContractNumber, _callback);
        return localVarCall;

    }

    /**
     * Retrieve NLB forwarding rules
     * Retrieve the specified Network Load Balance forwarding rule.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param forwardingRuleId The unique ID of the forwarding rule. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return NetworkLoadBalancerForwardingRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public NetworkLoadBalancerForwardingRule datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleId(String datacenterId, String networkLoadBalancerId, String forwardingRuleId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<NetworkLoadBalancerForwardingRule> localVarResp = datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleIdWithHttpInfo(datacenterId, networkLoadBalancerId, forwardingRuleId, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * Retrieve NLB forwarding rules
     * Retrieve the specified Network Load Balance forwarding rule.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param forwardingRuleId The unique ID of the forwarding rule. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return ApiResponse&lt;NetworkLoadBalancerForwardingRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkLoadBalancerForwardingRule> datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleIdWithHttpInfo(String datacenterId, String networkLoadBalancerId, String forwardingRuleId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleIdValidateBeforeCall(datacenterId, networkLoadBalancerId, forwardingRuleId, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<NetworkLoadBalancerForwardingRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve NLB forwarding rules (asynchronously)
     * Retrieve the specified Network Load Balance forwarding rule.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param forwardingRuleId The unique ID of the forwarding rule. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleIdAsync(String datacenterId, String networkLoadBalancerId, String forwardingRuleId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NetworkLoadBalancerForwardingRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersForwardingrulesFindByForwardingRuleIdValidateBeforeCall(datacenterId, networkLoadBalancerId, forwardingRuleId, pretty, depth, xContractNumber, _callback);
        Type localVarReturnType = new TypeToken<NetworkLoadBalancerForwardingRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersNetworkloadbalancersForwardingrulesGet
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersForwardingrulesGetCall(String datacenterId, String networkLoadBalancerId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NetworkLoadBalancerForwardingRules> _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}/forwardingrules"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "networkLoadBalancerId" + "\\}", localVarApiClient.escapeString(networkLoadBalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNetworkloadbalancersForwardingrulesGetValidateBeforeCall(String datacenterId, String networkLoadBalancerId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NetworkLoadBalancerForwardingRules> _callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNetworkloadbalancersForwardingrulesGet(Async)");
        }
        
        // verify the required parameter 'networkLoadBalancerId' is set
        if (networkLoadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'networkLoadBalancerId' when calling datacentersNetworkloadbalancersForwardingrulesGet(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersForwardingrulesGetCall(datacenterId, networkLoadBalancerId, pretty, depth, xContractNumber, _callback);
        return localVarCall;

    }

    /**
     * List NLB forwarding rules
     * List the forwarding rules for the specified Network Load Balancer.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return NetworkLoadBalancerForwardingRules
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public NetworkLoadBalancerForwardingRules datacentersNetworkloadbalancersForwardingrulesGet(String datacenterId, String networkLoadBalancerId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<NetworkLoadBalancerForwardingRules> localVarResp = datacentersNetworkloadbalancersForwardingrulesGetWithHttpInfo(datacenterId, networkLoadBalancerId, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * List NLB forwarding rules
     * List the forwarding rules for the specified Network Load Balancer.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return ApiResponse&lt;NetworkLoadBalancerForwardingRules&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkLoadBalancerForwardingRules> datacentersNetworkloadbalancersForwardingrulesGetWithHttpInfo(String datacenterId, String networkLoadBalancerId, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersNetworkloadbalancersForwardingrulesGetValidateBeforeCall(datacenterId, networkLoadBalancerId, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<NetworkLoadBalancerForwardingRules>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List NLB forwarding rules (asynchronously)
     * List the forwarding rules for the specified Network Load Balancer.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersForwardingrulesGetAsync(String datacenterId, String networkLoadBalancerId, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NetworkLoadBalancerForwardingRules> _callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersForwardingrulesGetValidateBeforeCall(datacenterId, networkLoadBalancerId, pretty, depth, xContractNumber, _callback);
        Type localVarReturnType = new TypeToken<NetworkLoadBalancerForwardingRules>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersNetworkloadbalancersForwardingrulesPatch
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param forwardingRuleId The unique ID of the forwarding rule. (required)
     * @param networkLoadBalancerForwardingRuleProperties The properties of the forwarding rule to be updated. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersForwardingrulesPatchCall(String datacenterId, String networkLoadBalancerId, String forwardingRuleId, NetworkLoadBalancerForwardingRuleProperties networkLoadBalancerForwardingRuleProperties, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NetworkLoadBalancerForwardingRule> _callback) throws ApiException {
        Object localVarPostBody = networkLoadBalancerForwardingRuleProperties;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}/forwardingrules/{forwardingRuleId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "networkLoadBalancerId" + "\\}", localVarApiClient.escapeString(networkLoadBalancerId.toString()))
            .replaceAll("\\{" + "forwardingRuleId" + "\\}", localVarApiClient.escapeString(forwardingRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNetworkloadbalancersForwardingrulesPatchValidateBeforeCall(String datacenterId, String networkLoadBalancerId, String forwardingRuleId, NetworkLoadBalancerForwardingRuleProperties networkLoadBalancerForwardingRuleProperties, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NetworkLoadBalancerForwardingRule> _callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNetworkloadbalancersForwardingrulesPatch(Async)");
        }
        
        // verify the required parameter 'networkLoadBalancerId' is set
        if (networkLoadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'networkLoadBalancerId' when calling datacentersNetworkloadbalancersForwardingrulesPatch(Async)");
        }
        
        // verify the required parameter 'forwardingRuleId' is set
        if (forwardingRuleId == null) {
            throw new ApiException("Missing the required parameter 'forwardingRuleId' when calling datacentersNetworkloadbalancersForwardingrulesPatch(Async)");
        }
        
        // verify the required parameter 'networkLoadBalancerForwardingRuleProperties' is set
        if (networkLoadBalancerForwardingRuleProperties == null) {
            throw new ApiException("Missing the required parameter 'networkLoadBalancerForwardingRuleProperties' when calling datacentersNetworkloadbalancersForwardingrulesPatch(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersForwardingrulesPatchCall(datacenterId, networkLoadBalancerId, forwardingRuleId, networkLoadBalancerForwardingRuleProperties, pretty, depth, xContractNumber, _callback);
        return localVarCall;

    }

    /**
     * Partially modify NLB forwarding rules
     * Update the properties of the specified Network Load Balancer forwarding rule.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param forwardingRuleId The unique ID of the forwarding rule. (required)
     * @param networkLoadBalancerForwardingRuleProperties The properties of the forwarding rule to be updated. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return NetworkLoadBalancerForwardingRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public NetworkLoadBalancerForwardingRule datacentersNetworkloadbalancersForwardingrulesPatch(String datacenterId, String networkLoadBalancerId, String forwardingRuleId, NetworkLoadBalancerForwardingRuleProperties networkLoadBalancerForwardingRuleProperties, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<NetworkLoadBalancerForwardingRule> localVarResp = datacentersNetworkloadbalancersForwardingrulesPatchWithHttpInfo(datacenterId, networkLoadBalancerId, forwardingRuleId, networkLoadBalancerForwardingRuleProperties, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * Partially modify NLB forwarding rules
     * Update the properties of the specified Network Load Balancer forwarding rule.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param forwardingRuleId The unique ID of the forwarding rule. (required)
     * @param networkLoadBalancerForwardingRuleProperties The properties of the forwarding rule to be updated. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return ApiResponse&lt;NetworkLoadBalancerForwardingRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkLoadBalancerForwardingRule> datacentersNetworkloadbalancersForwardingrulesPatchWithHttpInfo(String datacenterId, String networkLoadBalancerId, String forwardingRuleId, NetworkLoadBalancerForwardingRuleProperties networkLoadBalancerForwardingRuleProperties, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersNetworkloadbalancersForwardingrulesPatchValidateBeforeCall(datacenterId, networkLoadBalancerId, forwardingRuleId, networkLoadBalancerForwardingRuleProperties, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<NetworkLoadBalancerForwardingRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Partially modify NLB forwarding rules (asynchronously)
     * Update the properties of the specified Network Load Balancer forwarding rule.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param forwardingRuleId The unique ID of the forwarding rule. (required)
     * @param networkLoadBalancerForwardingRuleProperties The properties of the forwarding rule to be updated. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersForwardingrulesPatchAsync(String datacenterId, String networkLoadBalancerId, String forwardingRuleId, NetworkLoadBalancerForwardingRuleProperties networkLoadBalancerForwardingRuleProperties, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NetworkLoadBalancerForwardingRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersForwardingrulesPatchValidateBeforeCall(datacenterId, networkLoadBalancerId, forwardingRuleId, networkLoadBalancerForwardingRuleProperties, pretty, depth, xContractNumber, _callback);
        Type localVarReturnType = new TypeToken<NetworkLoadBalancerForwardingRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersNetworkloadbalancersForwardingrulesPost
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param networkLoadBalancerForwardingRule The forwarding rule to create. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersForwardingrulesPostCall(String datacenterId, String networkLoadBalancerId, NetworkLoadBalancerForwardingRule networkLoadBalancerForwardingRule, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NetworkLoadBalancerForwardingRule> _callback) throws ApiException {
        Object localVarPostBody = networkLoadBalancerForwardingRule;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}/forwardingrules"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "networkLoadBalancerId" + "\\}", localVarApiClient.escapeString(networkLoadBalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNetworkloadbalancersForwardingrulesPostValidateBeforeCall(String datacenterId, String networkLoadBalancerId, NetworkLoadBalancerForwardingRule networkLoadBalancerForwardingRule, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NetworkLoadBalancerForwardingRule> _callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNetworkloadbalancersForwardingrulesPost(Async)");
        }
        
        // verify the required parameter 'networkLoadBalancerId' is set
        if (networkLoadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'networkLoadBalancerId' when calling datacentersNetworkloadbalancersForwardingrulesPost(Async)");
        }
        
        // verify the required parameter 'networkLoadBalancerForwardingRule' is set
        if (networkLoadBalancerForwardingRule == null) {
            throw new ApiException("Missing the required parameter 'networkLoadBalancerForwardingRule' when calling datacentersNetworkloadbalancersForwardingrulesPost(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersForwardingrulesPostCall(datacenterId, networkLoadBalancerId, networkLoadBalancerForwardingRule, pretty, depth, xContractNumber, _callback);
        return localVarCall;

    }

    /**
     * Create NLB forwarding rules
     * Create a forwarding rule for the specified Network Load Balancer.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param networkLoadBalancerForwardingRule The forwarding rule to create. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return NetworkLoadBalancerForwardingRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public NetworkLoadBalancerForwardingRule datacentersNetworkloadbalancersForwardingrulesPost(String datacenterId, String networkLoadBalancerId, NetworkLoadBalancerForwardingRule networkLoadBalancerForwardingRule, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<NetworkLoadBalancerForwardingRule> localVarResp = datacentersNetworkloadbalancersForwardingrulesPostWithHttpInfo(datacenterId, networkLoadBalancerId, networkLoadBalancerForwardingRule, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * Create NLB forwarding rules
     * Create a forwarding rule for the specified Network Load Balancer.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param networkLoadBalancerForwardingRule The forwarding rule to create. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return ApiResponse&lt;NetworkLoadBalancerForwardingRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkLoadBalancerForwardingRule> datacentersNetworkloadbalancersForwardingrulesPostWithHttpInfo(String datacenterId, String networkLoadBalancerId, NetworkLoadBalancerForwardingRule networkLoadBalancerForwardingRule, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersNetworkloadbalancersForwardingrulesPostValidateBeforeCall(datacenterId, networkLoadBalancerId, networkLoadBalancerForwardingRule, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<NetworkLoadBalancerForwardingRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create NLB forwarding rules (asynchronously)
     * Create a forwarding rule for the specified Network Load Balancer.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param networkLoadBalancerForwardingRule The forwarding rule to create. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersForwardingrulesPostAsync(String datacenterId, String networkLoadBalancerId, NetworkLoadBalancerForwardingRule networkLoadBalancerForwardingRule, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NetworkLoadBalancerForwardingRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersForwardingrulesPostValidateBeforeCall(datacenterId, networkLoadBalancerId, networkLoadBalancerForwardingRule, pretty, depth, xContractNumber, _callback);
        Type localVarReturnType = new TypeToken<NetworkLoadBalancerForwardingRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersNetworkloadbalancersForwardingrulesPut
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param forwardingRuleId The unique ID of the forwarding rule. (required)
     * @param networkLoadBalancerForwardingRule The modified NLB forwarding rule. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersForwardingrulesPutCall(String datacenterId, String networkLoadBalancerId, String forwardingRuleId, NetworkLoadBalancerForwardingRulePut networkLoadBalancerForwardingRule, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NetworkLoadBalancerForwardingRule> _callback) throws ApiException {
        Object localVarPostBody = networkLoadBalancerForwardingRule;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}/forwardingrules/{forwardingRuleId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "networkLoadBalancerId" + "\\}", localVarApiClient.escapeString(networkLoadBalancerId.toString()))
            .replaceAll("\\{" + "forwardingRuleId" + "\\}", localVarApiClient.escapeString(forwardingRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNetworkloadbalancersForwardingrulesPutValidateBeforeCall(String datacenterId, String networkLoadBalancerId, String forwardingRuleId, NetworkLoadBalancerForwardingRulePut networkLoadBalancerForwardingRule, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NetworkLoadBalancerForwardingRule> _callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNetworkloadbalancersForwardingrulesPut(Async)");
        }
        
        // verify the required parameter 'networkLoadBalancerId' is set
        if (networkLoadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'networkLoadBalancerId' when calling datacentersNetworkloadbalancersForwardingrulesPut(Async)");
        }
        
        // verify the required parameter 'forwardingRuleId' is set
        if (forwardingRuleId == null) {
            throw new ApiException("Missing the required parameter 'forwardingRuleId' when calling datacentersNetworkloadbalancersForwardingrulesPut(Async)");
        }
        
        // verify the required parameter 'networkLoadBalancerForwardingRule' is set
        if (networkLoadBalancerForwardingRule == null) {
            throw new ApiException("Missing the required parameter 'networkLoadBalancerForwardingRule' when calling datacentersNetworkloadbalancersForwardingrulesPut(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersForwardingrulesPutCall(datacenterId, networkLoadBalancerId, forwardingRuleId, networkLoadBalancerForwardingRule, pretty, depth, xContractNumber, _callback);
        return localVarCall;

    }

    /**
     * Modify NLB forwarding rules
     * Modify the specified Network Load Balancer forwarding rule.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param forwardingRuleId The unique ID of the forwarding rule. (required)
     * @param networkLoadBalancerForwardingRule The modified NLB forwarding rule. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return NetworkLoadBalancerForwardingRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public NetworkLoadBalancerForwardingRule datacentersNetworkloadbalancersForwardingrulesPut(String datacenterId, String networkLoadBalancerId, String forwardingRuleId, NetworkLoadBalancerForwardingRulePut networkLoadBalancerForwardingRule, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<NetworkLoadBalancerForwardingRule> localVarResp = datacentersNetworkloadbalancersForwardingrulesPutWithHttpInfo(datacenterId, networkLoadBalancerId, forwardingRuleId, networkLoadBalancerForwardingRule, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * Modify NLB forwarding rules
     * Modify the specified Network Load Balancer forwarding rule.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param forwardingRuleId The unique ID of the forwarding rule. (required)
     * @param networkLoadBalancerForwardingRule The modified NLB forwarding rule. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return ApiResponse&lt;NetworkLoadBalancerForwardingRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkLoadBalancerForwardingRule> datacentersNetworkloadbalancersForwardingrulesPutWithHttpInfo(String datacenterId, String networkLoadBalancerId, String forwardingRuleId, NetworkLoadBalancerForwardingRulePut networkLoadBalancerForwardingRule, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersNetworkloadbalancersForwardingrulesPutValidateBeforeCall(datacenterId, networkLoadBalancerId, forwardingRuleId, networkLoadBalancerForwardingRule, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<NetworkLoadBalancerForwardingRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify NLB forwarding rules (asynchronously)
     * Modify the specified Network Load Balancer forwarding rule.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param forwardingRuleId The unique ID of the forwarding rule. (required)
     * @param networkLoadBalancerForwardingRule The modified NLB forwarding rule. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersForwardingrulesPutAsync(String datacenterId, String networkLoadBalancerId, String forwardingRuleId, NetworkLoadBalancerForwardingRulePut networkLoadBalancerForwardingRule, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NetworkLoadBalancerForwardingRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersForwardingrulesPutValidateBeforeCall(datacenterId, networkLoadBalancerId, forwardingRuleId, networkLoadBalancerForwardingRule, pretty, depth, xContractNumber, _callback);
        Type localVarReturnType = new TypeToken<NetworkLoadBalancerForwardingRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersNetworkloadbalancersGet
     * @param datacenterId The unique ID of the data center. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param offset The first element (from the complete list of the elements) to include in the response (use together with limit for pagination). (optional, default to 0)
     * @param limit The maximum number of elements to return (use together with offset for pagination). (optional, default to 1000)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersGetCall(String datacenterId, Boolean pretty, Integer depth, Integer xContractNumber, Integer offset, Integer limit, final ApiCallback<NetworkLoadBalancers> _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/networkloadbalancers"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNetworkloadbalancersGetValidateBeforeCall(String datacenterId, Boolean pretty, Integer depth, Integer xContractNumber, Integer offset, Integer limit, final ApiCallback<NetworkLoadBalancers> _callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNetworkloadbalancersGet(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersGetCall(datacenterId, pretty, depth, xContractNumber, offset, limit, _callback);
        return localVarCall;

    }

    /**
     * List Network Load Balancers
     * List all the Network Load Balancers within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param offset The first element (from the complete list of the elements) to include in the response (use together with limit for pagination). (optional, default to 0)
     * @param limit The maximum number of elements to return (use together with offset for pagination). (optional, default to 1000)
     * @return NetworkLoadBalancers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public NetworkLoadBalancers datacentersNetworkloadbalancersGet(String datacenterId, Boolean pretty, Integer depth, Integer xContractNumber, Integer offset, Integer limit) throws ApiException {
        ApiResponse<NetworkLoadBalancers> localVarResp = datacentersNetworkloadbalancersGetWithHttpInfo(datacenterId, pretty, depth, xContractNumber, offset, limit);
        return localVarResp.getData();
    }

    /**
     * List Network Load Balancers
     * List all the Network Load Balancers within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param offset The first element (from the complete list of the elements) to include in the response (use together with limit for pagination). (optional, default to 0)
     * @param limit The maximum number of elements to return (use together with offset for pagination). (optional, default to 1000)
     * @return ApiResponse&lt;NetworkLoadBalancers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkLoadBalancers> datacentersNetworkloadbalancersGetWithHttpInfo(String datacenterId, Boolean pretty, Integer depth, Integer xContractNumber, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = datacentersNetworkloadbalancersGetValidateBeforeCall(datacenterId, pretty, depth, xContractNumber, offset, limit, null);
        Type localVarReturnType = new TypeToken<NetworkLoadBalancers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Network Load Balancers (asynchronously)
     * List all the Network Load Balancers within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param offset The first element (from the complete list of the elements) to include in the response (use together with limit for pagination). (optional, default to 0)
     * @param limit The maximum number of elements to return (use together with offset for pagination). (optional, default to 1000)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersGetAsync(String datacenterId, Boolean pretty, Integer depth, Integer xContractNumber, Integer offset, Integer limit, final ApiCallback<NetworkLoadBalancers> _callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersGetValidateBeforeCall(datacenterId, pretty, depth, xContractNumber, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<NetworkLoadBalancers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersNetworkloadbalancersPatch
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param networkLoadBalancerProperties The properties of the Network Load Balancer to be updated. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersPatchCall(String datacenterId, String networkLoadBalancerId, NetworkLoadBalancerProperties networkLoadBalancerProperties, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NetworkLoadBalancer> _callback) throws ApiException {
        Object localVarPostBody = networkLoadBalancerProperties;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "networkLoadBalancerId" + "\\}", localVarApiClient.escapeString(networkLoadBalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNetworkloadbalancersPatchValidateBeforeCall(String datacenterId, String networkLoadBalancerId, NetworkLoadBalancerProperties networkLoadBalancerProperties, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NetworkLoadBalancer> _callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNetworkloadbalancersPatch(Async)");
        }
        
        // verify the required parameter 'networkLoadBalancerId' is set
        if (networkLoadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'networkLoadBalancerId' when calling datacentersNetworkloadbalancersPatch(Async)");
        }
        
        // verify the required parameter 'networkLoadBalancerProperties' is set
        if (networkLoadBalancerProperties == null) {
            throw new ApiException("Missing the required parameter 'networkLoadBalancerProperties' when calling datacentersNetworkloadbalancersPatch(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersPatchCall(datacenterId, networkLoadBalancerId, networkLoadBalancerProperties, pretty, depth, xContractNumber, _callback);
        return localVarCall;

    }

    /**
     * Partially modify Network Load Balancers
     * Update the properties of the specified Network Load Balancer within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param networkLoadBalancerProperties The properties of the Network Load Balancer to be updated. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return NetworkLoadBalancer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public NetworkLoadBalancer datacentersNetworkloadbalancersPatch(String datacenterId, String networkLoadBalancerId, NetworkLoadBalancerProperties networkLoadBalancerProperties, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<NetworkLoadBalancer> localVarResp = datacentersNetworkloadbalancersPatchWithHttpInfo(datacenterId, networkLoadBalancerId, networkLoadBalancerProperties, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * Partially modify Network Load Balancers
     * Update the properties of the specified Network Load Balancer within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param networkLoadBalancerProperties The properties of the Network Load Balancer to be updated. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return ApiResponse&lt;NetworkLoadBalancer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkLoadBalancer> datacentersNetworkloadbalancersPatchWithHttpInfo(String datacenterId, String networkLoadBalancerId, NetworkLoadBalancerProperties networkLoadBalancerProperties, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersNetworkloadbalancersPatchValidateBeforeCall(datacenterId, networkLoadBalancerId, networkLoadBalancerProperties, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<NetworkLoadBalancer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Partially modify Network Load Balancers (asynchronously)
     * Update the properties of the specified Network Load Balancer within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param networkLoadBalancerProperties The properties of the Network Load Balancer to be updated. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersPatchAsync(String datacenterId, String networkLoadBalancerId, NetworkLoadBalancerProperties networkLoadBalancerProperties, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NetworkLoadBalancer> _callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersPatchValidateBeforeCall(datacenterId, networkLoadBalancerId, networkLoadBalancerProperties, pretty, depth, xContractNumber, _callback);
        Type localVarReturnType = new TypeToken<NetworkLoadBalancer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersNetworkloadbalancersPost
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancer The Network Load Balancer to create. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersPostCall(String datacenterId, NetworkLoadBalancer networkLoadBalancer, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NetworkLoadBalancer> _callback) throws ApiException {
        Object localVarPostBody = networkLoadBalancer;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/networkloadbalancers"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNetworkloadbalancersPostValidateBeforeCall(String datacenterId, NetworkLoadBalancer networkLoadBalancer, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NetworkLoadBalancer> _callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNetworkloadbalancersPost(Async)");
        }
        
        // verify the required parameter 'networkLoadBalancer' is set
        if (networkLoadBalancer == null) {
            throw new ApiException("Missing the required parameter 'networkLoadBalancer' when calling datacentersNetworkloadbalancersPost(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersPostCall(datacenterId, networkLoadBalancer, pretty, depth, xContractNumber, _callback);
        return localVarCall;

    }

    /**
     * Create Network Load Balancers
     * Create a Network Load Balancer within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancer The Network Load Balancer to create. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return NetworkLoadBalancer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public NetworkLoadBalancer datacentersNetworkloadbalancersPost(String datacenterId, NetworkLoadBalancer networkLoadBalancer, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<NetworkLoadBalancer> localVarResp = datacentersNetworkloadbalancersPostWithHttpInfo(datacenterId, networkLoadBalancer, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * Create Network Load Balancers
     * Create a Network Load Balancer within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancer The Network Load Balancer to create. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return ApiResponse&lt;NetworkLoadBalancer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkLoadBalancer> datacentersNetworkloadbalancersPostWithHttpInfo(String datacenterId, NetworkLoadBalancer networkLoadBalancer, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersNetworkloadbalancersPostValidateBeforeCall(datacenterId, networkLoadBalancer, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<NetworkLoadBalancer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Network Load Balancers (asynchronously)
     * Create a Network Load Balancer within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancer The Network Load Balancer to create. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  * Location - Callback URL to poll async operation status. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersPostAsync(String datacenterId, NetworkLoadBalancer networkLoadBalancer, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NetworkLoadBalancer> _callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersPostValidateBeforeCall(datacenterId, networkLoadBalancer, pretty, depth, xContractNumber, _callback);
        Type localVarReturnType = new TypeToken<NetworkLoadBalancer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersNetworkloadbalancersPut
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param networkLoadBalancer The modified Network Load Balancer. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersPutCall(String datacenterId, String networkLoadBalancerId, NetworkLoadBalancerPut networkLoadBalancer, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NetworkLoadBalancer> _callback) throws ApiException {
        Object localVarPostBody = networkLoadBalancer;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/networkloadbalancers/{networkLoadBalancerId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "networkLoadBalancerId" + "\\}", localVarApiClient.escapeString(networkLoadBalancerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (xContractNumber != null) {
            localVarHeaderParams.put("X-Contract-Number", localVarApiClient.parameterToString(xContractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersNetworkloadbalancersPutValidateBeforeCall(String datacenterId, String networkLoadBalancerId, NetworkLoadBalancerPut networkLoadBalancer, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NetworkLoadBalancer> _callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersNetworkloadbalancersPut(Async)");
        }
        
        // verify the required parameter 'networkLoadBalancerId' is set
        if (networkLoadBalancerId == null) {
            throw new ApiException("Missing the required parameter 'networkLoadBalancerId' when calling datacentersNetworkloadbalancersPut(Async)");
        }
        
        // verify the required parameter 'networkLoadBalancer' is set
        if (networkLoadBalancer == null) {
            throw new ApiException("Missing the required parameter 'networkLoadBalancer' when calling datacentersNetworkloadbalancersPut(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersPutCall(datacenterId, networkLoadBalancerId, networkLoadBalancer, pretty, depth, xContractNumber, _callback);
        return localVarCall;

    }

    /**
     * Modify Network Load Balancers
     * Modify the properties of the specified Network Load Balancer within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param networkLoadBalancer The modified Network Load Balancer. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return NetworkLoadBalancer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public NetworkLoadBalancer datacentersNetworkloadbalancersPut(String datacenterId, String networkLoadBalancerId, NetworkLoadBalancerPut networkLoadBalancer, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        ApiResponse<NetworkLoadBalancer> localVarResp = datacentersNetworkloadbalancersPutWithHttpInfo(datacenterId, networkLoadBalancerId, networkLoadBalancer, pretty, depth, xContractNumber);
        return localVarResp.getData();
    }

    /**
     * Modify Network Load Balancers
     * Modify the properties of the specified Network Load Balancer within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param networkLoadBalancer The modified Network Load Balancer. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @return ApiResponse&lt;NetworkLoadBalancer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkLoadBalancer> datacentersNetworkloadbalancersPutWithHttpInfo(String datacenterId, String networkLoadBalancerId, NetworkLoadBalancerPut networkLoadBalancer, Boolean pretty, Integer depth, Integer xContractNumber) throws ApiException {
        okhttp3.Call localVarCall = datacentersNetworkloadbalancersPutValidateBeforeCall(datacenterId, networkLoadBalancerId, networkLoadBalancer, pretty, depth, xContractNumber, null);
        Type localVarReturnType = new TypeToken<NetworkLoadBalancer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify Network Load Balancers (asynchronously)
     * Modify the properties of the specified Network Load Balancer within the data center.
     * @param datacenterId The unique ID of the data center. (required)
     * @param networkLoadBalancerId The unique ID of the Network Load Balancer. (required)
     * @param networkLoadBalancer The modified Network Load Balancer. (required)
     * @param pretty Controls whether the response is pretty-printed (with indentations and new lines). (optional, default to true)
     * @param depth Controls the detail depth of the response objects.  GET /datacenters/[ID]  - depth&#x3D;0: Only direct properties are included; children (servers and other elements) are not included.  - depth&#x3D;1: Direct properties and children references are included.  - depth&#x3D;2: Direct properties and children properties are included.  - depth&#x3D;3: Direct properties and children properties and children&#39;s children are included.  - depth&#x3D;... and so on (optional, default to 0)
     * @param xContractNumber Users with multiple contracts must provide the contract number, against which all API requests are to be executed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  * X-RateLimit-Remaining - The number of requests that can still be made without triggering a failure response. <br>  * X-RateLimit-Limit - The average number of requests per minute allowed. <br>  * X-RateLimit-Burst - The maximum number of concurrent API requests allowed. <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient privileges), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), or 503 (maintenance). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersNetworkloadbalancersPutAsync(String datacenterId, String networkLoadBalancerId, NetworkLoadBalancerPut networkLoadBalancer, Boolean pretty, Integer depth, Integer xContractNumber, final ApiCallback<NetworkLoadBalancer> _callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersNetworkloadbalancersPutValidateBeforeCall(datacenterId, networkLoadBalancerId, networkLoadBalancer, pretty, depth, xContractNumber, _callback);
        Type localVarReturnType = new TypeToken<NetworkLoadBalancer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
