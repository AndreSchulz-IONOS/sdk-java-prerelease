/*
 * CLOUD API
 * An enterprise-grade Infrastructure is provided as a Service (IaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.   The API allows you to perform a variety of management tasks such as spinning up additional servers, adding volumes, adjusting networking, and so forth. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.
 *
 * The version of the OpenAPI document: 6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.api;

import com.ionoscloud.ApiCallback;
import com.ionoscloud.ApiClient;
import com.ionoscloud.ApiException;
import com.ionoscloud.ApiResponse;
import com.ionoscloud.Configuration;
import com.ionoscloud.Pair;
import com.ionoscloud.ProgressRequestBody;
import com.ionoscloud.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ionoscloud.model.Error;
import com.ionoscloud.model.FlowLog;
import com.ionoscloud.model.FlowLogProperties;
import com.ionoscloud.model.FlowLogPut;
import com.ionoscloud.model.FlowLogs;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FlowLogsApi {
    private ApiClient localVarApiClient;

    public FlowLogsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FlowLogsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for datacentersServersNicsFlowlogsDelete
     * @param datacenterId The unique ID of the datacenter (required)
     * @param serverId The unique ID of the Server (required)
     * @param nicId The unique ID of the NIC (required)
     * @param flowlogId The unique ID of the Flow Log (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersServersNicsFlowlogsDeleteCall(String datacenterId, String serverId, String nicId, String flowlogId, Boolean pretty, Integer depth, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/servers/{serverId}/nics/{nicId}/flowlogs/{flowlogId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "serverId" + "\\}", localVarApiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "nicId" + "\\}", localVarApiClient.escapeString(nicId.toString()))
            .replaceAll("\\{" + "flowlogId" + "\\}", localVarApiClient.escapeString(flowlogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersServersNicsFlowlogsDeleteValidateBeforeCall(String datacenterId, String serverId, String nicId, String flowlogId, Boolean pretty, Integer depth, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersServersNicsFlowlogsDelete(Async)");
        }
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling datacentersServersNicsFlowlogsDelete(Async)");
        }
        
        // verify the required parameter 'nicId' is set
        if (nicId == null) {
            throw new ApiException("Missing the required parameter 'nicId' when calling datacentersServersNicsFlowlogsDelete(Async)");
        }
        
        // verify the required parameter 'flowlogId' is set
        if (flowlogId == null) {
            throw new ApiException("Missing the required parameter 'flowlogId' when calling datacentersServersNicsFlowlogsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersServersNicsFlowlogsDeleteCall(datacenterId, serverId, nicId, flowlogId, pretty, depth, _callback);
        return localVarCall;

    }

    /**
     * Delete a Flow Log
     * Removes the specified Flow Log.
     * @param datacenterId The unique ID of the datacenter (required)
     * @param serverId The unique ID of the Server (required)
     * @param nicId The unique ID of the NIC (required)
     * @param flowlogId The unique ID of the Flow Log (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public Object datacentersServersNicsFlowlogsDelete(String datacenterId, String serverId, String nicId, String flowlogId, Boolean pretty, Integer depth) throws ApiException {
        ApiResponse<Object> localVarResp = datacentersServersNicsFlowlogsDeleteWithHttpInfo(datacenterId, serverId, nicId, flowlogId, pretty, depth);
        return localVarResp.getData();
    }

    /**
     * Delete a Flow Log
     * Removes the specified Flow Log.
     * @param datacenterId The unique ID of the datacenter (required)
     * @param serverId The unique ID of the Server (required)
     * @param nicId The unique ID of the NIC (required)
     * @param flowlogId The unique ID of the Flow Log (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> datacentersServersNicsFlowlogsDeleteWithHttpInfo(String datacenterId, String serverId, String nicId, String flowlogId, Boolean pretty, Integer depth) throws ApiException {
        okhttp3.Call localVarCall = datacentersServersNicsFlowlogsDeleteValidateBeforeCall(datacenterId, serverId, nicId, flowlogId, pretty, depth, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Flow Log (asynchronously)
     * Removes the specified Flow Log.
     * @param datacenterId The unique ID of the datacenter (required)
     * @param serverId The unique ID of the Server (required)
     * @param nicId The unique ID of the NIC (required)
     * @param flowlogId The unique ID of the Flow Log (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersServersNicsFlowlogsDeleteAsync(String datacenterId, String serverId, String nicId, String flowlogId, Boolean pretty, Integer depth, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersServersNicsFlowlogsDeleteValidateBeforeCall(datacenterId, serverId, nicId, flowlogId, pretty, depth, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersServersNicsFlowlogsFindById
     * @param datacenterId The unique ID of the datacenter (required)
     * @param serverId The unique ID of the Server (required)
     * @param nicId The unique ID of the NIC (required)
     * @param flowlogId The unique ID of the Flow Log (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersServersNicsFlowlogsFindByIdCall(String datacenterId, String serverId, String nicId, String flowlogId, Boolean pretty, Integer depth, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/servers/{serverId}/nics/{nicId}/flowlogs/{flowlogId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "serverId" + "\\}", localVarApiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "nicId" + "\\}", localVarApiClient.escapeString(nicId.toString()))
            .replaceAll("\\{" + "flowlogId" + "\\}", localVarApiClient.escapeString(flowlogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersServersNicsFlowlogsFindByIdValidateBeforeCall(String datacenterId, String serverId, String nicId, String flowlogId, Boolean pretty, Integer depth, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersServersNicsFlowlogsFindById(Async)");
        }
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling datacentersServersNicsFlowlogsFindById(Async)");
        }
        
        // verify the required parameter 'nicId' is set
        if (nicId == null) {
            throw new ApiException("Missing the required parameter 'nicId' when calling datacentersServersNicsFlowlogsFindById(Async)");
        }
        
        // verify the required parameter 'flowlogId' is set
        if (flowlogId == null) {
            throw new ApiException("Missing the required parameter 'flowlogId' when calling datacentersServersNicsFlowlogsFindById(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersServersNicsFlowlogsFindByIdCall(datacenterId, serverId, nicId, flowlogId, pretty, depth, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a Flow Log
     * Retrieves the attributes of a given Flow Log.
     * @param datacenterId The unique ID of the datacenter (required)
     * @param serverId The unique ID of the Server (required)
     * @param nicId The unique ID of the NIC (required)
     * @param flowlogId The unique ID of the Flow Log (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @return FlowLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public FlowLog datacentersServersNicsFlowlogsFindById(String datacenterId, String serverId, String nicId, String flowlogId, Boolean pretty, Integer depth) throws ApiException {
        ApiResponse<FlowLog> localVarResp = datacentersServersNicsFlowlogsFindByIdWithHttpInfo(datacenterId, serverId, nicId, flowlogId, pretty, depth);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Flow Log
     * Retrieves the attributes of a given Flow Log.
     * @param datacenterId The unique ID of the datacenter (required)
     * @param serverId The unique ID of the Server (required)
     * @param nicId The unique ID of the NIC (required)
     * @param flowlogId The unique ID of the Flow Log (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @return ApiResponse&lt;FlowLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlowLog> datacentersServersNicsFlowlogsFindByIdWithHttpInfo(String datacenterId, String serverId, String nicId, String flowlogId, Boolean pretty, Integer depth) throws ApiException {
        okhttp3.Call localVarCall = datacentersServersNicsFlowlogsFindByIdValidateBeforeCall(datacenterId, serverId, nicId, flowlogId, pretty, depth, null);
        Type localVarReturnType = new TypeToken<FlowLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Flow Log (asynchronously)
     * Retrieves the attributes of a given Flow Log.
     * @param datacenterId The unique ID of the datacenter (required)
     * @param serverId The unique ID of the Server (required)
     * @param nicId The unique ID of the NIC (required)
     * @param flowlogId The unique ID of the Flow Log (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersServersNicsFlowlogsFindByIdAsync(String datacenterId, String serverId, String nicId, String flowlogId, Boolean pretty, Integer depth, final ApiCallback<FlowLog> _callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersServersNicsFlowlogsFindByIdValidateBeforeCall(datacenterId, serverId, nicId, flowlogId, pretty, depth, _callback);
        Type localVarReturnType = new TypeToken<FlowLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersServersNicsFlowlogsGet
     * @param datacenterId The unique ID of the datacenter (required)
     * @param serverId The unique ID of the Server (required)
     * @param nicId The unique ID of the NIC (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param offset the first element (of the total list of elements) to include in the response (use together with limit for pagination) (optional, default to 0)
     * @param limit the maximum number of elements to return (use together with offset for pagination) (optional, default to 1000)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersServersNicsFlowlogsGetCall(String datacenterId, String serverId, String nicId, Boolean pretty, Integer depth, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/servers/{serverId}/nics/{nicId}/flowlogs"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "serverId" + "\\}", localVarApiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "nicId" + "\\}", localVarApiClient.escapeString(nicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersServersNicsFlowlogsGetValidateBeforeCall(String datacenterId, String serverId, String nicId, Boolean pretty, Integer depth, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersServersNicsFlowlogsGet(Async)");
        }
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling datacentersServersNicsFlowlogsGet(Async)");
        }
        
        // verify the required parameter 'nicId' is set
        if (nicId == null) {
            throw new ApiException("Missing the required parameter 'nicId' when calling datacentersServersNicsFlowlogsGet(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersServersNicsFlowlogsGetCall(datacenterId, serverId, nicId, pretty, depth, offset, limit, _callback);
        return localVarCall;

    }

    /**
     * List Flow Logs
     * Retrieves a list of Flow Logs associated with a particular network interface.
     * @param datacenterId The unique ID of the datacenter (required)
     * @param serverId The unique ID of the Server (required)
     * @param nicId The unique ID of the NIC (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param offset the first element (of the total list of elements) to include in the response (use together with limit for pagination) (optional, default to 0)
     * @param limit the maximum number of elements to return (use together with offset for pagination) (optional, default to 1000)
     * @return FlowLogs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public FlowLogs datacentersServersNicsFlowlogsGet(String datacenterId, String serverId, String nicId, Boolean pretty, Integer depth, Integer offset, Integer limit) throws ApiException {
        ApiResponse<FlowLogs> localVarResp = datacentersServersNicsFlowlogsGetWithHttpInfo(datacenterId, serverId, nicId, pretty, depth, offset, limit);
        return localVarResp.getData();
    }

    /**
     * List Flow Logs
     * Retrieves a list of Flow Logs associated with a particular network interface.
     * @param datacenterId The unique ID of the datacenter (required)
     * @param serverId The unique ID of the Server (required)
     * @param nicId The unique ID of the NIC (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param offset the first element (of the total list of elements) to include in the response (use together with limit for pagination) (optional, default to 0)
     * @param limit the maximum number of elements to return (use together with offset for pagination) (optional, default to 1000)
     * @return ApiResponse&lt;FlowLogs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlowLogs> datacentersServersNicsFlowlogsGetWithHttpInfo(String datacenterId, String serverId, String nicId, Boolean pretty, Integer depth, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = datacentersServersNicsFlowlogsGetValidateBeforeCall(datacenterId, serverId, nicId, pretty, depth, offset, limit, null);
        Type localVarReturnType = new TypeToken<FlowLogs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Flow Logs (asynchronously)
     * Retrieves a list of Flow Logs associated with a particular network interface.
     * @param datacenterId The unique ID of the datacenter (required)
     * @param serverId The unique ID of the Server (required)
     * @param nicId The unique ID of the NIC (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param offset the first element (of the total list of elements) to include in the response (use together with limit for pagination) (optional, default to 0)
     * @param limit the maximum number of elements to return (use together with offset for pagination) (optional, default to 1000)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersServersNicsFlowlogsGetAsync(String datacenterId, String serverId, String nicId, Boolean pretty, Integer depth, Integer offset, Integer limit, final ApiCallback<FlowLogs> _callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersServersNicsFlowlogsGetValidateBeforeCall(datacenterId, serverId, nicId, pretty, depth, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<FlowLogs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersServersNicsFlowlogsPatch
     * @param datacenterId The unique ID of the datacenter (required)
     * @param serverId The unique ID of the server (required)
     * @param nicId The unique ID of the NIC (required)
     * @param flowlogId The unique ID of the Flow Log (required)
     * @param flowlog Modified Flow Log (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersServersNicsFlowlogsPatchCall(String datacenterId, String serverId, String nicId, String flowlogId, FlowLogProperties flowlog, Boolean pretty, Integer depth, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = flowlog;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/servers/{serverId}/nics/{nicId}/flowlogs/{flowlogId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "serverId" + "\\}", localVarApiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "nicId" + "\\}", localVarApiClient.escapeString(nicId.toString()))
            .replaceAll("\\{" + "flowlogId" + "\\}", localVarApiClient.escapeString(flowlogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersServersNicsFlowlogsPatchValidateBeforeCall(String datacenterId, String serverId, String nicId, String flowlogId, FlowLogProperties flowlog, Boolean pretty, Integer depth, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersServersNicsFlowlogsPatch(Async)");
        }
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling datacentersServersNicsFlowlogsPatch(Async)");
        }
        
        // verify the required parameter 'nicId' is set
        if (nicId == null) {
            throw new ApiException("Missing the required parameter 'nicId' when calling datacentersServersNicsFlowlogsPatch(Async)");
        }
        
        // verify the required parameter 'flowlogId' is set
        if (flowlogId == null) {
            throw new ApiException("Missing the required parameter 'flowlogId' when calling datacentersServersNicsFlowlogsPatch(Async)");
        }
        
        // verify the required parameter 'flowlog' is set
        if (flowlog == null) {
            throw new ApiException("Missing the required parameter 'flowlog' when calling datacentersServersNicsFlowlogsPatch(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersServersNicsFlowlogsPatchCall(datacenterId, serverId, nicId, flowlogId, flowlog, pretty, depth, _callback);
        return localVarCall;

    }

    /**
     * Partially update a Flow Log
     * This will partially update a Flow Log record.
     * @param datacenterId The unique ID of the datacenter (required)
     * @param serverId The unique ID of the server (required)
     * @param nicId The unique ID of the NIC (required)
     * @param flowlogId The unique ID of the Flow Log (required)
     * @param flowlog Modified Flow Log (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @return FlowLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public FlowLog datacentersServersNicsFlowlogsPatch(String datacenterId, String serverId, String nicId, String flowlogId, FlowLogProperties flowlog, Boolean pretty, Integer depth) throws ApiException {
        ApiResponse<FlowLog> localVarResp = datacentersServersNicsFlowlogsPatchWithHttpInfo(datacenterId, serverId, nicId, flowlogId, flowlog, pretty, depth);
        return localVarResp.getData();
    }

    /**
     * Partially update a Flow Log
     * This will partially update a Flow Log record.
     * @param datacenterId The unique ID of the datacenter (required)
     * @param serverId The unique ID of the server (required)
     * @param nicId The unique ID of the NIC (required)
     * @param flowlogId The unique ID of the Flow Log (required)
     * @param flowlog Modified Flow Log (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @return ApiResponse&lt;FlowLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlowLog> datacentersServersNicsFlowlogsPatchWithHttpInfo(String datacenterId, String serverId, String nicId, String flowlogId, FlowLogProperties flowlog, Boolean pretty, Integer depth) throws ApiException {
        okhttp3.Call localVarCall = datacentersServersNicsFlowlogsPatchValidateBeforeCall(datacenterId, serverId, nicId, flowlogId, flowlog, pretty, depth, null);
        Type localVarReturnType = new TypeToken<FlowLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Partially update a Flow Log (asynchronously)
     * This will partially update a Flow Log record.
     * @param datacenterId The unique ID of the datacenter (required)
     * @param serverId The unique ID of the server (required)
     * @param nicId The unique ID of the NIC (required)
     * @param flowlogId The unique ID of the Flow Log (required)
     * @param flowlog Modified Flow Log (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersServersNicsFlowlogsPatchAsync(String datacenterId, String serverId, String nicId, String flowlogId, FlowLogProperties flowlog, Boolean pretty, Integer depth, final ApiCallback<FlowLog> _callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersServersNicsFlowlogsPatchValidateBeforeCall(datacenterId, serverId, nicId, flowlogId, flowlog, pretty, depth, _callback);
        Type localVarReturnType = new TypeToken<FlowLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersServersNicsFlowlogsPost
     * @param datacenterId The unique ID of the datacenter (required)
     * @param serverId The unique ID of the server (required)
     * @param nicId The unique ID of the NIC (required)
     * @param flowlog Flow Log to be created (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersServersNicsFlowlogsPostCall(String datacenterId, String serverId, String nicId, FlowLog flowlog, Boolean pretty, Integer depth, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = flowlog;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/servers/{serverId}/nics/{nicId}/flowlogs"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "serverId" + "\\}", localVarApiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "nicId" + "\\}", localVarApiClient.escapeString(nicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersServersNicsFlowlogsPostValidateBeforeCall(String datacenterId, String serverId, String nicId, FlowLog flowlog, Boolean pretty, Integer depth, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersServersNicsFlowlogsPost(Async)");
        }
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling datacentersServersNicsFlowlogsPost(Async)");
        }
        
        // verify the required parameter 'nicId' is set
        if (nicId == null) {
            throw new ApiException("Missing the required parameter 'nicId' when calling datacentersServersNicsFlowlogsPost(Async)");
        }
        
        // verify the required parameter 'flowlog' is set
        if (flowlog == null) {
            throw new ApiException("Missing the required parameter 'flowlog' when calling datacentersServersNicsFlowlogsPost(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersServersNicsFlowlogsPostCall(datacenterId, serverId, nicId, flowlog, pretty, depth, _callback);
        return localVarCall;

    }

    /**
     * Create a Flow Log
     * This will add a Flow Log to the network interface.
     * @param datacenterId The unique ID of the datacenter (required)
     * @param serverId The unique ID of the server (required)
     * @param nicId The unique ID of the NIC (required)
     * @param flowlog Flow Log to be created (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @return FlowLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public FlowLog datacentersServersNicsFlowlogsPost(String datacenterId, String serverId, String nicId, FlowLog flowlog, Boolean pretty, Integer depth) throws ApiException {
        ApiResponse<FlowLog> localVarResp = datacentersServersNicsFlowlogsPostWithHttpInfo(datacenterId, serverId, nicId, flowlog, pretty, depth);
        return localVarResp.getData();
    }

    /**
     * Create a Flow Log
     * This will add a Flow Log to the network interface.
     * @param datacenterId The unique ID of the datacenter (required)
     * @param serverId The unique ID of the server (required)
     * @param nicId The unique ID of the NIC (required)
     * @param flowlog Flow Log to be created (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @return ApiResponse&lt;FlowLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlowLog> datacentersServersNicsFlowlogsPostWithHttpInfo(String datacenterId, String serverId, String nicId, FlowLog flowlog, Boolean pretty, Integer depth) throws ApiException {
        okhttp3.Call localVarCall = datacentersServersNicsFlowlogsPostValidateBeforeCall(datacenterId, serverId, nicId, flowlog, pretty, depth, null);
        Type localVarReturnType = new TypeToken<FlowLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Flow Log (asynchronously)
     * This will add a Flow Log to the network interface.
     * @param datacenterId The unique ID of the datacenter (required)
     * @param serverId The unique ID of the server (required)
     * @param nicId The unique ID of the NIC (required)
     * @param flowlog Flow Log to be created (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersServersNicsFlowlogsPostAsync(String datacenterId, String serverId, String nicId, FlowLog flowlog, Boolean pretty, Integer depth, final ApiCallback<FlowLog> _callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersServersNicsFlowlogsPostValidateBeforeCall(datacenterId, serverId, nicId, flowlog, pretty, depth, _callback);
        Type localVarReturnType = new TypeToken<FlowLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datacentersServersNicsFlowlogsPut
     * @param datacenterId The unique ID of the datacenter (required)
     * @param serverId The unique ID of the server (required)
     * @param nicId The unique ID of the NIC (required)
     * @param flowlogId The unique ID of the Flow Log (required)
     * @param flowlog Modified Flow Log (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersServersNicsFlowlogsPutCall(String datacenterId, String serverId, String nicId, String flowlogId, FlowLogPut flowlog, Boolean pretty, Integer depth, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = flowlog;

        // create path and map variables
        String localVarPath = "/datacenters/{datacenterId}/servers/{serverId}/nics/{nicId}/flowlogs/{flowlogId}"
            .replaceAll("\\{" + "datacenterId" + "\\}", localVarApiClient.escapeString(datacenterId.toString()))
            .replaceAll("\\{" + "serverId" + "\\}", localVarApiClient.escapeString(serverId.toString()))
            .replaceAll("\\{" + "nicId" + "\\}", localVarApiClient.escapeString(nicId.toString()))
            .replaceAll("\\{" + "flowlogId" + "\\}", localVarApiClient.escapeString(flowlogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic Authentication", "Token Authentication" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datacentersServersNicsFlowlogsPutValidateBeforeCall(String datacenterId, String serverId, String nicId, String flowlogId, FlowLogPut flowlog, Boolean pretty, Integer depth, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'datacenterId' is set
        if (datacenterId == null) {
            throw new ApiException("Missing the required parameter 'datacenterId' when calling datacentersServersNicsFlowlogsPut(Async)");
        }
        
        // verify the required parameter 'serverId' is set
        if (serverId == null) {
            throw new ApiException("Missing the required parameter 'serverId' when calling datacentersServersNicsFlowlogsPut(Async)");
        }
        
        // verify the required parameter 'nicId' is set
        if (nicId == null) {
            throw new ApiException("Missing the required parameter 'nicId' when calling datacentersServersNicsFlowlogsPut(Async)");
        }
        
        // verify the required parameter 'flowlogId' is set
        if (flowlogId == null) {
            throw new ApiException("Missing the required parameter 'flowlogId' when calling datacentersServersNicsFlowlogsPut(Async)");
        }
        
        // verify the required parameter 'flowlog' is set
        if (flowlog == null) {
            throw new ApiException("Missing the required parameter 'flowlog' when calling datacentersServersNicsFlowlogsPut(Async)");
        }
        

        okhttp3.Call localVarCall = datacentersServersNicsFlowlogsPutCall(datacenterId, serverId, nicId, flowlogId, flowlog, pretty, depth, _callback);
        return localVarCall;

    }

    /**
     * Modify a Flow Log
     * This will update a Flow Log record.
     * @param datacenterId The unique ID of the datacenter (required)
     * @param serverId The unique ID of the server (required)
     * @param nicId The unique ID of the NIC (required)
     * @param flowlogId The unique ID of the Flow Log (required)
     * @param flowlog Modified Flow Log (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @return FlowLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public FlowLog datacentersServersNicsFlowlogsPut(String datacenterId, String serverId, String nicId, String flowlogId, FlowLogPut flowlog, Boolean pretty, Integer depth) throws ApiException {
        ApiResponse<FlowLog> localVarResp = datacentersServersNicsFlowlogsPutWithHttpInfo(datacenterId, serverId, nicId, flowlogId, flowlog, pretty, depth);
        return localVarResp.getData();
    }

    /**
     * Modify a Flow Log
     * This will update a Flow Log record.
     * @param datacenterId The unique ID of the datacenter (required)
     * @param serverId The unique ID of the server (required)
     * @param nicId The unique ID of the NIC (required)
     * @param flowlogId The unique ID of the Flow Log (required)
     * @param flowlog Modified Flow Log (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @return ApiResponse&lt;FlowLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlowLog> datacentersServersNicsFlowlogsPutWithHttpInfo(String datacenterId, String serverId, String nicId, String flowlogId, FlowLogPut flowlog, Boolean pretty, Integer depth) throws ApiException {
        okhttp3.Call localVarCall = datacentersServersNicsFlowlogsPutValidateBeforeCall(datacenterId, serverId, nicId, flowlogId, flowlog, pretty, depth, null);
        Type localVarReturnType = new TypeToken<FlowLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify a Flow Log (asynchronously)
     * This will update a Flow Log record.
     * @param datacenterId The unique ID of the datacenter (required)
     * @param serverId The unique ID of the server (required)
     * @param nicId The unique ID of the NIC (required)
     * @param flowlogId The unique ID of the Flow Log (required)
     * @param flowlog Modified Flow Log (required)
     * @param pretty Controls whether response is pretty-printed (with indentation and new lines) (optional, default to true)
     * @param depth Controls the details depth of response objects.  Eg. GET /datacenters/[ID]  - depth&#x3D;0: only direct properties are included. Children (servers etc.) are not included  - depth&#x3D;1: direct properties and children references are included  - depth&#x3D;2: direct properties and children properties are included  - depth&#x3D;3: direct properties and children properties and children&#39;s children are included  - depth&#x3D;... and so on (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  * X-RateLimit-Remaining - Number of requests which can still be made without triggering a failure response.  <br>  * X-RateLimit-Limit - Average number of requests allowed per minute <br>  * X-RateLimit-Burst - Maximum number of concurrent API requests allowed <br>  * Location - Callback URL to poll async operation status <br>  </td></tr>
        <tr><td> 0 </td><td> Any erroneous status code: 400 (parse error), 401 (auth error), 402 (trial access), 403 (insufficient permissions), 404 (not found), 405 (unsupported HTTP method), 415 (unsupported content type, 422 (validation error), 429 (request rate limit exceeded), 500 (server error), 503 (maintenance) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datacentersServersNicsFlowlogsPutAsync(String datacenterId, String serverId, String nicId, String flowlogId, FlowLogPut flowlog, Boolean pretty, Integer depth, final ApiCallback<FlowLog> _callback) throws ApiException {

        okhttp3.Call localVarCall = datacentersServersNicsFlowlogsPutValidateBeforeCall(datacenterId, serverId, nicId, flowlogId, flowlog, pretty, depth, _callback);
        Type localVarReturnType = new TypeToken<FlowLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
